import React, { useEffect, useState } from 'react';
import { telegramService } from '../services/telegram';

interface SimpleMapTestProps {
  initialUserLocation?: { lat: number; lon: number } | null;
  isTelegram: boolean;
}

export function SimpleMapTest({ initialUserLocation, isTelegram }: SimpleMapTestProps) {
  const [mapStatus, setMapStatus] = useState<string>('Initializing...');
  const [leafletLoaded, setLeafletLoaded] = useState(false);

  useEffect(() => {
    const checkDependencies = () => {
      console.log('Checking map dependencies...');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º Leaflet
      if (typeof window !== 'undefined' && window.L) {
        console.log('‚úÖ Leaflet loaded');
        setLeafletLoaded(true);
        setMapStatus('Leaflet loaded');
      } else {
        console.error('‚ùå Leaflet not loaded');
        setMapStatus('Leaflet not loaded');
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º React-Leaflet
      try {
        const { MapContainer } = require('react-leaflet');
        console.log('‚úÖ React-Leaflet loaded');
        setMapStatus(prev => prev + ' | React-Leaflet loaded');
      } catch (error) {
        console.error('‚ùå React-Leaflet not loaded:', error);
        setMapStatus(prev => prev + ' | React-Leaflet failed');
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º Telegram WebApp
      if (isTelegram) {
        console.log('‚úÖ Telegram WebApp mode');
        setMapStatus(prev => prev + ' | Telegram mode');
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º viewport
      if (typeof window !== 'undefined') {
        const height = window.innerHeight;
        const width = window.innerWidth;
        console.log(`Viewport: ${width}x${height}`);
        setMapStatus(prev => prev + ` | Viewport: ${width}x${height}`);
      }
    };

    // –û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    setTimeout(checkDependencies, 2000);
  }, [isTelegram]);

  if (!leafletLoaded) {
    return (
      <div className="d-flex flex-column justify-content-center align-items-center" style={{ height: '100vh', backgroundColor: '#f8f9fa' }}>
        <div className="spinner-border text-primary mb-3" role="status">
          <span className="visually-hidden">Loading...</span>
        </div>
        <h5>–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç—ã...</h5>
        <p className="text-muted">{mapStatus}</p>
        {isTelegram && (
          <div className="mt-3 p-3 bg-info text-white rounded">
            <small>üì± Telegram WebApp detected</small>
          </div>
        )}
      </div>
    );
  }

  return (
    <div className="p-4" style={{ height: '100vh', backgroundColor: '#f8f9fa' }}>
      <div className="card">
        <div className="card-header">
          <h5 className="mb-0">üó∫Ô∏è –¢–µ—Å—Ç –∫–∞—Ä—Ç—ã</h5>
        </div>
        <div className="card-body">
          <div className="alert alert-info">
            <strong>–°—Ç–∞—Ç—É—Å:</strong> {mapStatus}
          </div>
          
          {isTelegram && (
            <div className="alert alert-success">
              <strong>‚úÖ Telegram WebApp</strong> - –∫–∞—Ä—Ç–∞ –¥–æ–ª–∂–Ω–∞ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ–¥ –º–æ–±–∏–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            </div>
          )}

          <div className="mt-3">
            <h6>–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:</h6>
            <ul className="list-unstyled">
              <li>üì¶ Leaflet: {leafletLoaded ? '‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω' : '‚ùå –ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω'}</li>
              <li>üì± Telegram: {isTelegram ? '‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω' : '‚ùå –ù–µ –≤ Telegram'}</li>
              <li>üåê HTTPS: {typeof window !== 'undefined' && window.location.protocol === 'https:' ? '‚úÖ' : '‚ùå'}</li>
            </ul>
          </div>

          <div className="mt-3">
            <button 
              className="btn btn-primary"
              onClick={() => {
                if (telegramService.isTelegramApp()) {
                  telegramService.showAlert('–ö–∞—Ä—Ç–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!');
                } else {
                  alert('–ö–∞—Ä—Ç–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!');
                }
              }}
            >
              üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}