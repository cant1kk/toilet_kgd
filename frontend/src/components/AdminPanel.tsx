import React, { useState, useEffect } from 'react';
import { Card, Table, Button, Badge, Modal, Form, Alert, Spinner } from 'react-bootstrap';
import { toiletAPI, adminAPI } from '../services/api';
import { Toilet } from '../types';
import { telegramService } from '../services/telegram';
import { useTelegramAuth } from '../hooks/useTelegramAuth';

interface AdminPanelProps {
  isTelegram: boolean;
}

const AdminPanel: React.FC<AdminPanelProps> = ({ isTelegram }) => {
  const [toilets, setToilets] = useState<Toilet[]>([]);
  const [stats, setStats] = useState<any>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [showEditModal, setShowEditModal] = useState(false);
  const [editingToilet, setEditingToilet] = useState<Toilet | null>(null);
  const [actionLoading, setActionLoading] = useState(false);
  const { user, isAdmin } = useTelegramAuth();

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
  const loadData = async () => {
    try {
      setLoading(true);
      setError(null);
      
      const [toiletsData, statsData] = await Promise.all([
        adminAPI.getAllToilets(),
        adminAPI.getStats()
      ]);
      
      setToilets(toiletsData);
      setStats(statsData);
    } catch (err) {
      console.error('Error loading admin data:', err);
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ');
      
      if (isTelegram) {
        telegramService.showAlert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
      }
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    if (isAdmin) {
      loadData();
    }
  }, [isAdmin]);

  // –£—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç—É–∞–ª–µ—Ç–∞
  const handleApprove = async (id: number) => {
    try {
      setActionLoading(true);
      await adminAPI.approveToilet(id);
      
      setToilets(prev => 
        prev.map(t => t.id === id ? { ...t, approved: true } : t)
      );
      
      if (isTelegram) {
        telegramService.notificationOccurred('success');
      }
    } catch (err) {
      console.error('Error approving toilet:', err);
      
      if (isTelegram) {
        telegramService.showAlert('–ù–µ —É–¥–∞–ª–æ—Å—å —É—Ç–≤–µ—Ä–¥–∏—Ç—å —Ç–æ—á–∫—É');
      }
    } finally {
      setActionLoading(false);
    }
  };

  // –£–¥–∞–ª–µ–Ω–∏–µ —Ç—É–∞–ª–µ—Ç–∞
  const handleDelete = async (id: number) => {
    const confirmMessage = '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É —Ç–æ—á–∫—É?';
    
    const confirmed = isTelegram 
      ? await new Promise<boolean>((resolve) => {
          telegramService.showConfirm(confirmMessage, resolve);
        })
      : window.confirm(confirmMessage);
    
    if (!confirmed) return;

    try {
      setActionLoading(true);
      await adminAPI.rejectToilet(id);
      
      setToilets(prev => prev.filter(t => t.id !== id));
      
      if (isTelegram) {
        telegramService.notificationOccurred('success');
      }
    } catch (err) {
      console.error('Error deleting toilet:', err);
      
      if (isTelegram) {
        telegramService.showAlert('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–æ—á–∫—É');
      }
    } finally {
      setActionLoading(false);
    }
  };

  // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—É–∞–ª–µ—Ç–∞
  const handleEdit = (toilet: Toilet) => {
    setEditingToilet(toilet);
    setShowEditModal(true);
  };

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
  const handleSaveEdit = async () => {
    if (!editingToilet) return;

    try {
      setActionLoading(true);
      const updated = await toiletAPI.update(editingToilet.id!, editingToilet);
      
      setToilets(prev => 
        prev.map(t => t.id === editingToilet.id ? updated : t)
      );
      
      setShowEditModal(false);
      setEditingToilet(null);
      
      if (isTelegram) {
        telegramService.notificationOccurred('success');
      }
    } catch (err) {
      console.error('Error updating toilet:', err);
      
      if (isTelegram) {
        telegramService.showAlert('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ—á–∫—É');
      }
    } finally {
      setActionLoading(false);
    }
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  if (!isAdmin) {
    return (
      <div className="container mt-4">
        <Alert variant="danger">
          <h4>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</h4>
          <p>–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –ø–∞–Ω–µ–ª–∏.</p>
        </Alert>
      </div>
    );
  }

  if (loading) {
    return (
      <div className="container mt-4 text-center">
        <Spinner animation="border" />
        <p className="mt-2">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</p>
      </div>
    );
  }

  if (error) {
    return (
      <div className="container mt-4">
        <Alert variant="danger">
          {error}
          <Button variant="outline-danger" className="ms-2" onClick={loadData}>
            –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
          </Button>
        </Alert>
      </div>
    );
  }

  return (
    <div className={`container mt-4 ${isTelegram ? 'telegram-admin' : ''}`}>
      <div className="d-flex justify-content-between align-items-center mb-4">
        <h2>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</h2>
        <Button variant="primary" onClick={loadData} disabled={loading}>
          –û–±–Ω–æ–≤–∏—Ç—å
        </Button>
      </div>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      {stats && (
        <div className="row mb-4">
          <div className="col-md-3 mb-3">
            <Card className="text-center">
              <Card.Body>
                <h3 className="text-primary">{stats.total}</h3>
                <p className="mb-0">–í—Å–µ–≥–æ —Ç–æ—á–µ–∫</p>
              </Card.Body>
            </Card>
          </div>
          <div className="col-md-3 mb-3">
            <Card className="text-center">
              <Card.Body>
                <h3 className="text-success">{stats.approved}</h3>
                <p className="mb-0">–£—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ</p>
              </Card.Body>
            </Card>
          </div>
          <div className="col-md-3 mb-3">
            <Card className="text-center">
              <Card.Body>
                <h3 className="text-warning">{stats.pending}</h3>
                <p className="mb-0">–ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏</p>
              </Card.Body>
            </Card>
          </div>
          <div className="col-md-3 mb-3">
            <Card className="text-center">
              <Card.Body>
                <h3 className="text-info">{stats.today}</h3>
                <p className="mb-0">–î–æ–±–∞–≤–ª–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è</p>
              </Card.Body>
            </Card>
          </div>
        </div>
      )}

      {/* –¢–∞–±–ª–∏—Ü–∞ —Ç—É–∞–ª–µ—Ç–æ–≤ */}
      <Card>
        <Card.Header>
          <h5 className="mb-0">–í—Å–µ —Ç–æ—á–∫–∏ ({toilets.length})</h5>
        </Card.Header>
        <Card.Body className="p-0">
          <div className="table-responsive">
            <Table hover className="mb-0">
              <thead>
                <tr>
                  <th>ID</th>
                  <th>–ù–∞–∑–≤–∞–Ω–∏–µ</th>
                  <th>–ê–¥—Ä–µ—Å</th>
                  <th>–¢–∏–ø</th>
                  <th>–°—Ç–∞—Ç—É—Å</th>
                  <th>–î–∞—Ç–∞</th>
                  <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                </tr>
              </thead>
              <tbody>
                {toilets.map((toilet) => (
                  <tr key={toilet.id}>
                    <td>{toilet.id}</td>
                    <td>{toilet.name}</td>
                    <td>{toilet.address}</td>
                    <td>
                      <Badge 
                        bg={
                          toilet.type === 'free' ? 'success' : 
                          toilet.type === 'paid' ? 'danger' : 'warning'
                        }
                      >
                        {toilet.type === 'free' ? '–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π' : 
                         toilet.type === 'paid' ? '–ü–ª–∞—Ç–Ω—ã–π' : '–ó–∞ –ø–æ–∫—É–ø–∫—É'}
                      </Badge>
                    </td>
                    <td>
                      <Badge bg={toilet.approved ? 'success' : 'warning'}>
                        {toilet.approved ? '–£—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ' : '–ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏'}
                      </Badge>
                    </td>
                    <td>
                      {new Date(toilet.created_at!).toLocaleDateString('ru-RU')}
                    </td>
                    <td>
                      <div className="btn-group" role="group">
                        <Button
                          size="sm"
                          variant="outline-primary"
                          onClick={() => handleEdit(toilet)}
                          disabled={actionLoading}
                        >
                          ‚úèÔ∏è
                        </Button>
                        {!toilet.approved && (
                          <Button
                            size="sm"
                            variant="outline-success"
                            onClick={() => handleApprove(toilet.id!)}
                            disabled={actionLoading}
                          >
                            ‚úÖ
                          </Button>
                        )}
                        <Button
                          size="sm"
                          variant="outline-danger"
                          onClick={() => handleDelete(toilet.id!)}
                          disabled={actionLoading}
                        >
                          üóëÔ∏è
                        </Button>
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </Table>
          </div>
        </Card.Body>
      </Card>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
      <Modal
        show={showEditModal}
        onHide={() => setShowEditModal(false)}
        centered
        size="lg"
        className={isTelegram ? 'telegram-modal' : ''}
      >
        <Modal.Header closeButton>
          <Modal.Title>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ—á–∫–∏</Modal.Title>
        </Modal.Header>
        
        {editingToilet && (
          <Form onSubmit={(e) => { e.preventDefault(); handleSaveEdit(); }}>
            <Modal.Body>
              <Form.Group className="mb-3">
                <Form.Label>–ù–∞–∑–≤–∞–Ω–∏–µ</Form.Label>
                <Form.Control
                  type="text"
                  value={editingToilet.name}
                  onChange={(e) => setEditingToilet({...editingToilet, name: e.target.value})}
                  disabled={actionLoading}
                />
              </Form.Group>

              <Form.Group className="mb-3">
                <Form.Label>–ê–¥—Ä–µ—Å</Form.Label>
                <Form.Control
                  type="text"
                  value={editingToilet.address}
                  onChange={(e) => setEditingToilet({...editingToilet, address: e.target.value})}
                  disabled={actionLoading}
                />
              </Form.Group>

              <Form.Group className="mb-3">
                <Form.Label>–¢–∏–ø</Form.Label>
                <Form.Select
                  value={editingToilet.type}
                  onChange={(e) => setEditingToilet({...editingToilet, type: e.target.value as Toilet['type']})}
                  disabled={actionLoading}
                >
                  <option value="free">–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π</option>
                  <option value="paid">–ü–ª–∞—Ç–Ω—ã–π</option>
                  <option value="purchase_required">–¢–æ–ª—å–∫–æ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π</option>
                </Form.Select>
              </Form.Group>

              {editingToilet.type === 'paid' && (
                <Form.Group className="mb-3">
                  <Form.Label>–¶–µ–Ω–∞</Form.Label>
                  <Form.Control
                    type="text"
                    value={editingToilet.price || ''}
                    onChange={(e) => setEditingToilet({...editingToilet, price: e.target.value})}
                    disabled={actionLoading}
                  />
                </Form.Group>
              )}

              <Form.Group className="mb-3">
                <Form.Label>–û–ø–∏—Å–∞–Ω–∏–µ</Form.Label>
                <Form.Control
                  as="textarea"
                  rows={3}
                  value={editingToilet.description || ''}
                  onChange={(e) => setEditingToilet({...editingToilet, description: e.target.value})}
                  disabled={actionLoading}
                />
              </Form.Group>
            </Modal.Body>

            <Modal.Footer>
              <Button
                variant="secondary"
                onClick={() => setShowEditModal(false)}
                disabled={actionLoading}
              >
                –û—Ç–º–µ–Ω–∞
              </Button>
              <Button
                type="submit"
                variant="primary"
                disabled={actionLoading}
              >
                {actionLoading ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}
              </Button>
            </Modal.Footer>
          </Form>
        )}
      </Modal>
    </div>
  );
};

export default AdminPanel;