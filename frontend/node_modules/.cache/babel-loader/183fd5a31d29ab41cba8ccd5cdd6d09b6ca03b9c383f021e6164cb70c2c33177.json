{"ast":null,"code":"import axios from'axios';import{telegramService}from'./telegram';// Базовый URL API\nconst API_BASE_URL=process.env.REACT_APP_API_URL||'http://localhost:5000/api';// Создаем экземпляр axios с настройками\nconst api=axios.create({baseURL:API_BASE_URL,timeout:10000,headers:{'Content-Type':'application/json'}});// Перехватчик для добавления токена авторизации\napi.interceptors.request.use(config=>{const token=localStorage.getItem('authToken');if(token){config.headers.Authorization=\"Bearer \".concat(token);}// Если мы в Telegram, добавляем initData\nif(telegramService.isTelegramApp()){var _window$Telegram,_window$Telegram$WebA;const initData=(_window$Telegram=window.Telegram)===null||_window$Telegram===void 0?void 0:(_window$Telegram$WebA=_window$Telegram.WebApp)===null||_window$Telegram$WebA===void 0?void 0:_window$Telegram$WebA.initData;if(initData){config.headers['X-Telegram-Init-Data']=initData;}}return config;},error=>{return Promise.reject(error);});// Перехватчик для обработки ошибок\napi.interceptors.response.use(response=>response,error=>{var _error$response;if(((_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status)===401){// Токен истек, удаляем его\nlocalStorage.removeItem('authToken');localStorage.removeItem('user');// Если в Telegram, можно показать сообщение и закрыть приложение\nif(telegramService.isTelegramApp()){telegramService.showAlert('Сессия истекла. Пожалуйста, перезапустите приложение.');}}return Promise.reject(error);});// Интерфейсы\n// API функции\nexport const toiletAPI={// Получение всех туалетов\ngetAll:async()=>{const response=await api.get('/toilets');return response.data;},// Получение утвержденных туалетов\ngetApproved:async()=>{const response=await api.get('/toilets/approved');return response.data;},// Добавление нового туалета\nadd:async toilet=>{const response=await api.post('/toilets',toilet);return response.data;},// Обновление туалета\nupdate:async(id,toilet)=>{const response=await api.put(\"/toilets/\".concat(id),toilet);return response.data;},// Удаление туалета\ndelete:async id=>{await api.delete(\"/toilets/\".concat(id));},// Поиск близлежащих туалетов\nfindNearby:async function(lat,lon){let radius=arguments.length>2&&arguments[2]!==undefined?arguments[2]:5000;const response=await api.get(\"/toilets/nearby?lat=\".concat(lat,\"&lon=\").concat(lon,\"&radius=\").concat(radius));return response.data;}};// API аутентификации\nexport const authAPI={// Вход администратора\nlogin:async(username,password)=>{const response=await api.post('/auth/login',{username,password});return response.data;},// Регистрация администратора\nregister:async(username,password)=>{const response=await api.post('/auth/register',{username,password});return response.data;},// Telegram аутентификация\ntelegramAuth:async()=>{var _window$Telegram2,_window$Telegram2$Web;if(!telegramService.isTelegramApp()){throw new Error('Not in Telegram WebApp');}const initData=(_window$Telegram2=window.Telegram)===null||_window$Telegram2===void 0?void 0:(_window$Telegram2$Web=_window$Telegram2.WebApp)===null||_window$Telegram2$Web===void 0?void 0:_window$Telegram2$Web.initData;if(!initData){throw new Error('No init data available');}const response=await api.post('/telegram/auth',{initData});return response.data;},// Получение информации о текущем пользователе\ngetCurrentUser:async()=>{const response=await api.get('/telegram/me');return response.data;}};// API администратора\nexport const adminAPI={// Получение статистики\ngetStats:async()=>{const response=await api.get('/admin/stats');return response.data;},// Получение всех туалетов (включая неутвержденные)\ngetAllToilets:async()=>{const response=await api.get('/admin/toilets');return response.data;},// Утверждение туалета\napproveToilet:async id=>{const response=await api.put(\"/admin/toilets/\".concat(id,\"/approve\"));return response.data;},// Отклонение туалета\nrejectToilet:async id=>{await api.delete(\"/admin/toilets/\".concat(id));}};export default api;","map":{"version":3,"names":["axios","telegramService","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","timeout","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","concat","isTelegramApp","_window$Telegram","_window$Telegram$WebA","initData","window","Telegram","WebApp","error","Promise","reject","response","_error$response","status","removeItem","showAlert","toiletAPI","getAll","get","data","getApproved","add","toilet","post","update","id","put","delete","findNearby","lat","lon","radius","arguments","length","undefined","authAPI","login","username","password","register","telegramAuth","_window$Telegram2","_window$Telegram2$Web","Error","getCurrentUser","adminAPI","getStats","getAllToilets","approveToilet","rejectToilet"],"sources":["D:/map for cur/toilet-finder-kaliningrad/frontend/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\nimport { Toilet, ToiletFormData, Admin, User } from '../types';\nimport { telegramService } from './telegram';\n\n// Базовый URL API\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\n// Создаем экземпляр axios с настройками\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Перехватчик для добавления токена авторизации\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('authToken');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    \n    // Если мы в Telegram, добавляем initData\n    if (telegramService.isTelegramApp()) {\n      const initData = window.Telegram?.WebApp?.initData;\n      if (initData) {\n        config.headers['X-Telegram-Init-Data'] = initData;\n      }\n    }\n    \n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Перехватчик для обработки ошибок\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response?.status === 401) {\n      // Токен истек, удаляем его\n      localStorage.removeItem('authToken');\n      localStorage.removeItem('user');\n      \n      // Если в Telegram, можно показать сообщение и закрыть приложение\n      if (telegramService.isTelegramApp()) {\n        telegramService.showAlert('Сессия истекла. Пожалуйста, перезапустите приложение.');\n      }\n    }\n    return Promise.reject(error);\n  }\n);\n\n// Интерфейсы\n\n// API функции\nexport const toiletAPI = {\n  // Получение всех туалетов\n  getAll: async (): Promise<Toilet[]> => {\n    const response = await api.get('/toilets');\n    return response.data;\n  },\n\n  // Получение утвержденных туалетов\n  getApproved: async (): Promise<Toilet[]> => {\n    const response = await api.get('/toilets/approved');\n    return response.data;\n  },\n\n  // Добавление нового туалета\n  add: async (toilet: Omit<Toilet, 'id' | 'approved' | 'created_at'>): Promise<Toilet> => {\n    const response = await api.post('/toilets', toilet);\n    return response.data;\n  },\n\n  // Обновление туалета\n  update: async (id: number, toilet: Partial<Toilet>): Promise<Toilet> => {\n    const response = await api.put(`/toilets/${id}`, toilet);\n    return response.data;\n  },\n\n  // Удаление туалета\n  delete: async (id: number): Promise<void> => {\n    await api.delete(`/toilets/${id}`);\n  },\n\n  // Поиск близлежащих туалетов\n  findNearby: async (lat: number, lon: number, radius: number = 5000): Promise<Toilet[]> => {\n    const response = await api.get(`/toilets/nearby?lat=${lat}&lon=${lon}&radius=${radius}`);\n    return response.data;\n  },\n};\n\n// API аутентификации\nexport const authAPI = {\n  // Вход администратора\n  login: async (username: string, password: string) => {\n    const response = await api.post('/auth/login', { username, password });\n    return response.data;\n  },\n\n  // Регистрация администратора\n  register: async (username: string, password: string) => {\n    const response = await api.post('/auth/register', { username, password });\n    return response.data;\n  },\n\n  // Telegram аутентификация\n  telegramAuth: async () => {\n    if (!telegramService.isTelegramApp()) {\n      throw new Error('Not in Telegram WebApp');\n    }\n\n    const initData = window.Telegram?.WebApp?.initData;\n    if (!initData) {\n      throw new Error('No init data available');\n    }\n\n    const response = await api.post('/telegram/auth', { initData });\n    return response.data;\n  },\n\n  // Получение информации о текущем пользователе\n  getCurrentUser: async (): Promise<User> => {\n    const response = await api.get('/telegram/me');\n    return response.data;\n  },\n};\n\n// API администратора\nexport const adminAPI = {\n  // Получение статистики\n  getStats: async () => {\n    const response = await api.get('/admin/stats');\n    return response.data;\n  },\n\n  // Получение всех туалетов (включая неутвержденные)\n  getAllToilets: async (): Promise<Toilet[]> => {\n    const response = await api.get('/admin/toilets');\n    return response.data;\n  },\n\n  // Утверждение туалета\n  approveToilet: async (id: number): Promise<Toilet> => {\n    const response = await api.put(`/admin/toilets/${id}/approve`);\n    return response.data;\n  },\n\n  // Отклонение туалета\n  rejectToilet: async (id: number): Promise<void> => {\n    await api.delete(`/admin/toilets/${id}`);\n  },\n};\n\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}