{"ast":null,"code":"import{useState,useEffect}from'react';import{authAPI}from'../services/api';import{telegramService}from'../services/telegram';export const useTelegramAuth=()=>{const[user,setUser]=useState(null);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);useEffect(()=>{const initAuth=async()=>{try{// Проверяем, есть ли сохраненный токен\nconst savedToken=localStorage.getItem('authToken');const savedUser=localStorage.getItem('user');if(savedToken&&savedUser){// Проверяем валидность токена\ntry{const currentUser=await authAPI.getCurrentUser();setUser(currentUser);setLoading(false);return;}catch(err){// Токен невалидный, удаляем его\nlocalStorage.removeItem('authToken');localStorage.removeItem('user');}}// Если мы в Telegram, пытаемся аутентифицироваться\nif(telegramService.isTelegramApp()){const authData=await authAPI.telegramAuth();// Сохраняем токен и данные пользователя\nlocalStorage.setItem('authToken',authData.token);localStorage.setItem('user',JSON.stringify(authData.user));setUser(authData.user);// Показываем уведомление об успешной аутентификации\ntelegramService.notificationOccurred('success');}else{// Вне Telegram просто устанавливаем загрузку в false\nconsole.log('Running outside Telegram WebApp - skipping authentication');}}catch(err){console.error('Auth error:',err);setError(err instanceof Error?err.message:'Authentication failed');if(telegramService.isTelegramApp()){telegramService.notificationOccurred('error');telegramService.showAlert('Ошибка аутентификации. Пожалуйста, попробуйте позже.');}else{console.error('Authentication error:',err);}}finally{setLoading(false);}};initAuth();},[]);const logout=()=>{localStorage.removeItem('authToken');localStorage.removeItem('user');setUser(null);setError(null);if(telegramService.isTelegramApp()){telegramService.showAlert('Вы вышли из системы');}};return{user,loading,error,isAuthenticated:!!user,isAdmin:(user===null||user===void 0?void 0:user.isAdmin)||false,logout};};","map":{"version":3,"names":["useState","useEffect","authAPI","telegramService","useTelegramAuth","user","setUser","loading","setLoading","error","setError","initAuth","savedToken","localStorage","getItem","savedUser","currentUser","getCurrentUser","err","removeItem","isTelegramApp","authData","telegramAuth","setItem","token","JSON","stringify","notificationOccurred","console","log","Error","message","showAlert","logout","isAuthenticated","isAdmin"],"sources":["D:/map for cur/toilet-finder-kaliningrad/frontend/src/hooks/useTelegramAuth.ts"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { authAPI } from '../services/api';\nimport { telegramService } from '../services/telegram';\n\ninterface User {\n  id: number;\n  telegram_id?: number;\n  username: string;\n  isAdmin?: boolean;\n}\n\nexport const useTelegramAuth = () => {\n  const [user, setUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const initAuth = async () => {\n      try {\n        // Проверяем, есть ли сохраненный токен\n        const savedToken = localStorage.getItem('authToken');\n        const savedUser = localStorage.getItem('user');\n\n        if (savedToken && savedUser) {\n          // Проверяем валидность токена\n          try {\n            const currentUser = await authAPI.getCurrentUser();\n            setUser(currentUser);\n            setLoading(false);\n            return;\n          } catch (err) {\n            // Токен невалидный, удаляем его\n            localStorage.removeItem('authToken');\n            localStorage.removeItem('user');\n          }\n        }\n\n        // Если мы в Telegram, пытаемся аутентифицироваться\n        if (telegramService.isTelegramApp()) {\n          const authData = await authAPI.telegramAuth();\n          \n          // Сохраняем токен и данные пользователя\n          localStorage.setItem('authToken', authData.token);\n          localStorage.setItem('user', JSON.stringify(authData.user));\n          \n          setUser(authData.user);\n          \n          // Показываем уведомление об успешной аутентификации\n          telegramService.notificationOccurred('success');\n        } else {\n          // Вне Telegram просто устанавливаем загрузку в false\n          console.log('Running outside Telegram WebApp - skipping authentication');\n        }\n      } catch (err) {\n        console.error('Auth error:', err);\n        setError(err instanceof Error ? err.message : 'Authentication failed');\n        \n        if (telegramService.isTelegramApp()) {\n          telegramService.notificationOccurred('error');\n          telegramService.showAlert('Ошибка аутентификации. Пожалуйста, попробуйте позже.');\n        } else {\n          console.error('Authentication error:', err);\n        }\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    initAuth();\n  }, []);\n\n  const logout = () => {\n    localStorage.removeItem('authToken');\n    localStorage.removeItem('user');\n    setUser(null);\n    setError(null);\n    \n    if (telegramService.isTelegramApp()) {\n      telegramService.showAlert('Вы вышли из системы');\n    }\n  };\n\n  return {\n    user,\n    loading,\n    error,\n    isAuthenticated: !!user,\n    isAdmin: user?.isAdmin || false,\n    logout,\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}