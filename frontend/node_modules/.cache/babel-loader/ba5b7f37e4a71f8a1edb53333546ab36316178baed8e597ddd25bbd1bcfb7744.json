{"ast":null,"code":"import React,{useState,useEffect,useCallback}from'react';import{MapContainer,TileLayer,Marker,Popup,useMapEvents}from'react-leaflet';import{Icon,LatLngBounds}from'leaflet';import'leaflet/dist/leaflet.css';import{toiletAPI}from'../services/api';import{telegramService}from'../services/telegram';import{useTelegramAuth}from'../hooks/useTelegramAuth';import AddToiletModal from'./AddToiletModal';import Legend from'./Legend';import'../styles/map.css';// Fix для иконок Leaflet в React\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";delete Icon.Default.prototype._getIconUrl;Icon.Default.mergeOptions({iconRetinaUrl:'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon-2x.png',iconUrl:'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png',shadowUrl:'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png'});// Компонент для обработки событий карты\nfunction MapEventHandler(_ref){let{onMapClick}=_ref;useMapEvents({click:e=>{onMapClick(e.latlng.lat,e.latlng.lng);}});return null;}const MapPage=_ref2=>{let{initialUserLocation,isTelegram}=_ref2;const[toilets,setToilets]=useState([]);const[loading,setLoading]=useState(true);const[showAddModal,setShowAddModal]=useState(false);const[selectedPosition,setSelectedPosition]=useState(null);const[userLocation,setUserLocation]=useState(initialUserLocation||null);const[error,setError]=useState(null);const{user}=useTelegramAuth();// Загрузка туалетов\nconst loadToilets=useCallback(async()=>{try{setLoading(true);setError(null);const data=await toiletAPI.getApproved();setToilets(data);}catch(err){console.error('Error loading toilets:',err);setError('Не удалось загрузить данные о туалетах');if(isTelegram){telegramService.showAlert('Не удалось загрузить данные. Попробуйте обновить страницу.');}}finally{setLoading(false);}},[isTelegram]);useEffect(()=>{loadToilets();},[loadToilets]);// Получение геолокации пользователя\nuseEffect(()=>{if(!userLocation&&navigator.geolocation){navigator.geolocation.getCurrentPosition(position=>{const location={lat:position.coords.latitude,lon:position.coords.longitude};setUserLocation(location);// Поиск близлежащих туалетов\nfindNearbyToilets(location.lat,location.lon);},error=>{console.warn('Geolocation error:',error);if(isTelegram){telegramService.showAlert('Не удалось определить ваше местоположение');}});}},[userLocation,isTelegram]);//Поиск близлежащих туалетов\nconst findNearbyToilets=async(lat,lon)=>{try{const nearby=await toiletAPI.findNearby(lat,lon,5000);// 5km radius\nif(nearby.length>0){setToilets(prev=>{// Объединяем с существующими, удаляя дубликаты\nconst existingIds=new Set(prev.map(t=>t.id));const newToilets=nearby.filter(t=>!existingIds.has(t.id));return[...prev,...newToilets];});if(isTelegram){telegramService.notificationOccurred('success');}}}catch(err){console.error('Error finding nearby toilets:',err);}};// Обработка клика по карте\nconst handleMapClick=(lat,lng)=>{if(!user){if(isTelegram){telegramService.showAlert('Для добавления точек необходимо авторизоваться');}else{alert('Для добавления точек необходимо авторизоваться');}return;}setSelectedPosition({lat,lng});setShowAddModal(true);if(isTelegram){telegramService.impactOccurred('light');}};// Добавление нового туалета\nconst handleAddToilet=async toiletData=>{try{await toiletAPI.add(toiletData);setShowAddModal(false);setSelectedPosition(null);// Перезагружаем список\nawait loadToilets();if(isTelegram){telegramService.showAlert('Точка успешно добавлена и будет проверена модератором');telegramService.notificationOccurred('success');}else{alert('Точка успешно добавлена и будет проверена модератором');}}catch(err){console.error('Error adding toilet:',err);if(isTelegram){telegramService.showAlert('Не удалось добавить точку. Попробуйте позже.');telegramService.notificationOccurred('error');}else{alert('Не удалось добавить точку. Попробуйте позже.');}}};// Определение иконки маркера\nconst getMarkerIcon=type=>{const iconUrls={free:'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-green.png',paid:'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-red.png',purchase_required:'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-yellow.png'};return new Icon({iconUrl:iconUrls[type],shadowUrl:'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png',iconSize:[25,41],iconAnchor:[12,41],popupAnchor:[1,-34],shadowSize:[41,41]});};// Определение центра карты\nconst getMapCenter=()=>{if(userLocation){return[userLocation.lat,userLocation.lon];}// Центр Калининграда\nreturn[54.710,20.510];};// Определение границ для показа всех маркеров\nconst getMapBounds=()=>{if(toilets.length===0)return null;const bounds=new LatLngBounds([[toilets[0].latitude,toilets[0].longitude],[toilets[0].latitude,toilets[0].longitude]]);toilets.forEach(toilet=>{bounds.extend([toilet.latitude,toilet.longitude]);});if(userLocation){bounds.extend([userLocation.lat,userLocation.lon]);}return bounds;};if(loading){return/*#__PURE__*/_jsxs(\"div\",{className:\"map-loading\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"spinner-border text-primary\",role:\"status\",children:/*#__PURE__*/_jsx(\"span\",{className:\"visually-hidden\",children:\"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430...\"})}),/*#__PURE__*/_jsx(\"p\",{children:\"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430 \\u043A\\u0430\\u0440\\u0442\\u044B...\"})]});}if(error){return/*#__PURE__*/_jsxs(\"div\",{className:\"map-error\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"alert alert-danger\",children:error}),/*#__PURE__*/_jsx(\"button\",{className:\"btn btn-primary\",onClick:loadToilets,children:\"\\u041F\\u043E\\u043F\\u0440\\u043E\\u0431\\u043E\\u0432\\u0430\\u0442\\u044C \\u0441\\u043D\\u043E\\u0432\\u0430\"})]});}return/*#__PURE__*/_jsxs(\"div\",{className:\"map-page \".concat(isTelegram?'telegram-map':''),children:[/*#__PURE__*/_jsxs(MapContainer,{center:getMapCenter(),zoom:13,className:\"map-container\",bounds:getMapBounds()||undefined,boundsOptions:{padding:[50,50]},children:[/*#__PURE__*/_jsx(TileLayer,{attribution:\"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\",url:\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"}),/*#__PURE__*/_jsx(MapEventHandler,{onMapClick:handleMapClick}),userLocation&&/*#__PURE__*/_jsx(Marker,{position:[userLocation.lat,userLocation.lon],icon:new Icon({iconUrl:'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-blue.png',shadowUrl:'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png',iconSize:[25,41],iconAnchor:[12,41],popupAnchor:[1,-34],shadowSize:[41,41]}),children:/*#__PURE__*/_jsx(Popup,{children:/*#__PURE__*/_jsx(\"strong\",{children:\"\\u0412\\u0430\\u0448\\u0435 \\u043C\\u0435\\u0441\\u0442\\u043E\\u043F\\u043E\\u043B\\u043E\\u0436\\u0435\\u043D\\u0438\\u0435\"})})}),toilets.map(toilet=>/*#__PURE__*/_jsx(Marker,{position:[toilet.latitude,toilet.longitude],icon:getMarkerIcon(toilet.type),children:/*#__PURE__*/_jsx(Popup,{children:/*#__PURE__*/_jsxs(\"div\",{className:\"toilet-popup\",children:[/*#__PURE__*/_jsx(\"h6\",{children:toilet.name}),/*#__PURE__*/_jsxs(\"p\",{className:\"mb-1\",children:[/*#__PURE__*/_jsx(\"strong\",{children:\"\\u0410\\u0434\\u0440\\u0435\\u0441:\"}),\" \",toilet.address]}),toilet.price&&/*#__PURE__*/_jsxs(\"p\",{className:\"mb-1\",children:[/*#__PURE__*/_jsx(\"strong\",{children:\"\\u0426\\u0435\\u043D\\u0430:\"}),\" \",toilet.price]}),toilet.description&&/*#__PURE__*/_jsxs(\"p\",{className:\"mb-1\",children:[/*#__PURE__*/_jsx(\"strong\",{children:\"\\u041E\\u043F\\u0438\\u0441\\u0430\\u043D\\u0438\\u0435:\"}),\" \",toilet.description]}),/*#__PURE__*/_jsx(\"p\",{className:\"mb-0\",children:/*#__PURE__*/_jsx(\"span\",{className:\"badge bg-\".concat(toilet.type==='free'?'success':toilet.type==='paid'?'danger':'warning'),children:toilet.type==='free'?'Бесплатный':toilet.type==='paid'?'Платный':'За покупку'})})]})})},toilet.id))]}),/*#__PURE__*/_jsx(Legend,{isTelegram:isTelegram}),/*#__PURE__*/_jsx(AddToiletModal,{show:showAddModal,onHide:()=>{setShowAddModal(false);setSelectedPosition(null);},onAdd:handleAddToilet,initialPosition:selectedPosition,isTelegram:isTelegram})]});};export default MapPage;","map":{"version":3,"names":["React","useState","useEffect","useCallback","MapContainer","TileLayer","Marker","Popup","useMapEvents","Icon","LatLngBounds","toiletAPI","telegramService","useTelegramAuth","AddToiletModal","Legend","jsx","_jsx","jsxs","_jsxs","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","iconUrl","shadowUrl","MapEventHandler","_ref","onMapClick","click","e","latlng","lat","lng","MapPage","_ref2","initialUserLocation","isTelegram","toilets","setToilets","loading","setLoading","showAddModal","setShowAddModal","selectedPosition","setSelectedPosition","userLocation","setUserLocation","error","setError","user","loadToilets","data","getApproved","err","console","showAlert","navigator","geolocation","getCurrentPosition","position","location","coords","latitude","lon","longitude","findNearbyToilets","warn","nearby","findNearby","length","prev","existingIds","Set","map","t","id","newToilets","filter","has","notificationOccurred","handleMapClick","alert","impactOccurred","handleAddToilet","toiletData","add","getMarkerIcon","type","iconUrls","free","paid","purchase_required","iconSize","iconAnchor","popupAnchor","shadowSize","getMapCenter","getMapBounds","bounds","forEach","toilet","extend","className","children","role","onClick","concat","center","zoom","undefined","boundsOptions","padding","attribution","url","icon","name","address","price","description","show","onHide","onAdd","initialPosition"],"sources":["d:/map for cur/toilet-finder-kaliningrad/frontend/src/components/MapPage.tsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { MapContainer, TileLayer, Marker, Popup, useMapEvents } from 'react-leaflet';\nimport { Icon, LatLngBounds } from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport { toiletAPI } from '../services/api';\nimport { Toilet } from '../types';\nimport { telegramService } from '../services/telegram';\nimport { useTelegramAuth } from '../hooks/useTelegramAuth';\nimport AddToiletModal from './AddToiletModal';\nimport Legend from './Legend';\nimport '../styles/map.css';\n\n// Fix для иконок Leaflet в React\ndelete (Icon.Default.prototype as any)._getIconUrl;\nIcon.Default.mergeOptions({\n  iconRetinaUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon-2x.png',\n  iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png',\n  shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png',\n});\n\ninterface MapPageProps {\n  initialUserLocation?: { lat: number; lon: number } | null;\n  isTelegram: boolean;\n}\n\n// Компонент для обработки событий карты\nfunction MapEventHandler({ onMapClick }: { onMapClick: (lat: number, lng: number) => void }) {\n  useMapEvents({\n    click: (e) => {\n      onMapClick(e.latlng.lat, e.latlng.lng);\n    },\n  });\n  return null;\n}\n\nconst MapPage: React.FC<MapPageProps> = ({ initialUserLocation, isTelegram }) => {\n  const [toilets, setToilets] = useState<Toilet[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [showAddModal, setShowAddModal] = useState(false);\n  const [selectedPosition, setSelectedPosition] = useState<{ lat: number; lng: number } | null>(null);\n  const [userLocation, setUserLocation] = useState<{ lat: number; lon: number } | null>(initialUserLocation || null);\n  const [error, setError] = useState<string | null>(null);\n  const { user } = useTelegramAuth();\n\n  // Загрузка туалетов\n  const loadToilets = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const data = await toiletAPI.getApproved();\n      setToilets(data);\n    } catch (err) {\n      console.error('Error loading toilets:', err);\n      setError('Не удалось загрузить данные о туалетах');\n      \n      if (isTelegram) {\n        telegramService.showAlert('Не удалось загрузить данные. Попробуйте обновить страницу.');\n      }\n    } finally {\n      setLoading(false);\n    }\n  }, [isTelegram]);\n\n  useEffect(() => {\n    loadToilets();\n  }, [loadToilets]);\n\n  // Получение геолокации пользователя\n  useEffect(() => {\n    if (!userLocation && navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          const location = {\n            lat: position.coords.latitude,\n            lon: position.coords.longitude,\n          };\n          setUserLocation(location);\n          \n          // Поиск близлежащих туалетов\n          findNearbyToilets(location.lat, location.lon);\n        },\n        (error) => {\n          console.warn('Geolocation error:', error);\n          if (isTelegram) {\n            telegramService.showAlert('Не удалось определить ваше местоположение');\n          }\n        }\n      );\n    }\n  }, [userLocation, isTelegram]);\n\n  //Поиск близлежащих туалетов\n  const findNearbyToilets = async (lat: number, lon: number) => {\n    try {\n      const nearby = await toiletAPI.findNearby(lat, lon, 5000); // 5km radius\n      if (nearby.length > 0) {\n        setToilets(prev => {\n          // Объединяем с существующими, удаляя дубликаты\n          const existingIds = new Set(prev.map(t => t.id));\n          const newToilets = nearby.filter(t => !existingIds.has(t.id));\n          return [...prev, ...newToilets];\n        });\n        \n        if (isTelegram) {\n          telegramService.notificationOccurred('success');\n        }\n      }\n    } catch (err) {\n      console.error('Error finding nearby toilets:', err);\n    }\n  };\n\n  // Обработка клика по карте\n  const handleMapClick = (lat: number, lng: number) => {\n    if (!user) {\n      if (isTelegram) {\n        telegramService.showAlert('Для добавления точек необходимо авторизоваться');\n      } else {\n        alert('Для добавления точек необходимо авторизоваться');\n      }\n      return;\n    }\n\n    setSelectedPosition({ lat, lng });\n    setShowAddModal(true);\n    \n    if (isTelegram) {\n      telegramService.impactOccurred('light');\n    }\n  };\n\n  // Добавление нового туалета\n  const handleAddToilet = async (toiletData: Omit<Toilet, 'id' | 'approved' | 'created_at'>) => {\n    try {\n      await toiletAPI.add(toiletData);\n      setShowAddModal(false);\n      setSelectedPosition(null);\n      \n      // Перезагружаем список\n      await loadToilets();\n      \n      if (isTelegram) {\n        telegramService.showAlert('Точка успешно добавлена и будет проверена модератором');\n        telegramService.notificationOccurred('success');\n      } else {\n        alert('Точка успешно добавлена и будет проверена модератором');\n      }\n    } catch (err) {\n      console.error('Error adding toilet:', err);\n      \n      if (isTelegram) {\n        telegramService.showAlert('Не удалось добавить точку. Попробуйте позже.');\n        telegramService.notificationOccurred('error');\n      } else {\n        alert('Не удалось добавить точку. Попробуйте позже.');\n      }\n    }\n  };\n\n  // Определение иконки маркера\n  const getMarkerIcon = (type: Toilet['type']) => {\n    const iconUrls = {\n      free: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-green.png',\n      paid: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-red.png',\n      purchase_required: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-yellow.png',\n    };\n\n    return new Icon({\n      iconUrl: iconUrls[type],\n      shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png',\n      iconSize: [25, 41],\n      iconAnchor: [12, 41],\n      popupAnchor: [1, -34],\n      shadowSize: [41, 41],\n    });\n  };\n\n  // Определение центра карты\n  const getMapCenter = () => {\n    if (userLocation) {\n      return [userLocation.lat, userLocation.lon] as [number, number];\n    }\n    // Центр Калининграда\n    return [54.710, 20.510] as [number, number];\n  };\n\n  // Определение границ для показа всех маркеров\n  const getMapBounds = () => {\n    if (toilets.length === 0) return null;\n    \n    const bounds = new LatLngBounds([[toilets[0].latitude, toilets[0].longitude], [toilets[0].latitude, toilets[0].longitude]]);\n    toilets.forEach(toilet => {\n      bounds.extend([toilet.latitude, toilet.longitude]);\n    });\n    \n    if (userLocation) {\n      bounds.extend([userLocation.lat, userLocation.lon]);\n    }\n    \n    return bounds;\n  };\n\n  if (loading) {\n    return (\n      <div className=\"map-loading\">\n        <div className=\"spinner-border text-primary\" role=\"status\">\n          <span className=\"visually-hidden\">Загрузка...</span>\n        </div>\n        <p>Загрузка карты...</p>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"map-error\">\n        <div className=\"alert alert-danger\">\n          {error}\n        </div>\n        <button className=\"btn btn-primary\" onClick={loadToilets}>\n          Попробовать снова\n        </button>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`map-page ${isTelegram ? 'telegram-map' : ''}`}>\n      <MapContainer\n        center={getMapCenter()}\n        zoom={13}\n        className=\"map-container\"\n        bounds={getMapBounds() || undefined}\n        boundsOptions={{ padding: [50, 50] }}\n      >\n        <TileLayer\n          attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        \n        <MapEventHandler onMapClick={handleMapClick} />\n\n        {/* Маркер пользователя */}\n        {userLocation && (\n          <Marker\n            position={[userLocation.lat, userLocation.lon]}\n            icon={new Icon({\n              iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-blue.png',\n              shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png',\n              iconSize: [25, 41],\n              iconAnchor: [12, 41],\n              popupAnchor: [1, -34],\n              shadowSize: [41, 41],\n            })}\n          >\n            <Popup>\n              <strong>Ваше местоположение</strong>\n            </Popup>\n          </Marker>\n        )}\n\n        {/* Маркеры туалетов */}\n        {toilets.map((toilet) => (\n          <Marker\n            key={toilet.id}\n            position={[toilet.latitude, toilet.longitude]}\n            icon={getMarkerIcon(toilet.type)}\n          >\n            <Popup>\n              <div className=\"toilet-popup\">\n                <h6>{toilet.name}</h6>\n                <p className=\"mb-1\">\n                  <strong>Адрес:</strong> {toilet.address}\n                </p>\n                {toilet.price && (\n                  <p className=\"mb-1\">\n                    <strong>Цена:</strong> {toilet.price}\n                  </p>\n                )}\n                {toilet.description && (\n                  <p className=\"mb-1\">\n                    <strong>Описание:</strong> {toilet.description}\n                  </p>\n                )}\n                <p className=\"mb-0\">\n                  <span className={`badge bg-${toilet.type === 'free' ? 'success' : toilet.type === 'paid' ? 'danger' : 'warning'}`}>\n                    {toilet.type === 'free' ? 'Бесплатный' : toilet.type === 'paid' ? 'Платный' : 'За покупку'}\n                  </span>\n                </p>\n              </div>\n            </Popup>\n          </Marker>\n        ))}\n      </MapContainer>\n\n      {/* Легенда */}\n      <Legend isTelegram={isTelegram} />\n\n      {/* Модальное окно добавления туалета */}\n      <AddToiletModal\n        show={showAddModal}\n        onHide={() => {\n          setShowAddModal(false);\n          setSelectedPosition(null);\n        }}\n        onAdd={handleAddToilet}\n        initialPosition={selectedPosition}\n        isTelegram={isTelegram}\n      />\n    </div>\n  );\n};\n\nexport default MapPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}