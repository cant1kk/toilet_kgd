{"ast":null,"code":"import { useEffect } from 'react';\nimport { useAttribution } from './attribution.js';\nimport { useLeafletContext } from './context.js';\nimport { useEventHandlers } from './events.js';\nimport { withPane } from './pane.js';\nexport function useLayerLifecycle(element, context) {\n  useEffect(function addLayer() {\n    var _context$layerContain;\n    const container = (_context$layerContain = context.layerContainer) !== null && _context$layerContain !== void 0 ? _context$layerContain : context.map;\n    container.addLayer(element.instance);\n    return function removeLayer() {\n      var _context$layerContain2;\n      (_context$layerContain2 = context.layerContainer) === null || _context$layerContain2 === void 0 || _context$layerContain2.removeLayer(element.instance);\n      context.map.removeLayer(element.instance);\n    };\n  }, [context, element]);\n}\nexport function createLayerHook(useElement) {\n  return function useLayer(props) {\n    const context = useLeafletContext();\n    const elementRef = useElement(withPane(props, context), context);\n    useAttribution(context.map, props.attribution);\n    useEventHandlers(elementRef.current, props.eventHandlers);\n    useLayerLifecycle(elementRef.current, context);\n    return elementRef;\n  };\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}