{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { authAPI } from '../services/api';\nimport { telegramService } from '../services/telegram';\nexport const useTelegramAuth = () => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const initAuth = async () => {\n      try {\n        // Проверяем, есть ли сохраненный токен\n        const savedToken = localStorage.getItem('authToken');\n        const savedUser = localStorage.getItem('user');\n        if (savedToken && savedUser) {\n          // Проверяем валидность токена\n          try {\n            const currentUser = await authAPI.getCurrentUser();\n            setUser(currentUser);\n            setLoading(false);\n            return;\n          } catch (err) {\n            // Токен невалидный, удаляем его\n            localStorage.removeItem('authToken');\n            localStorage.removeItem('user');\n          }\n        }\n\n        // Если мы в Telegram, пытаемся аутентифицироваться\n        if (telegramService.isTelegramApp()) {\n          const authData = await authAPI.telegramAuth();\n\n          // Сохраняем токен и данные пользователя\n          localStorage.setItem('authToken', authData.token);\n          localStorage.setItem('user', JSON.stringify(authData.user));\n          setUser(authData.user);\n\n          // Показываем уведомление об успешной аутентификации\n          telegramService.notificationOccurred('success');\n        }\n      } catch (err) {\n        console.error('Auth error:', err);\n        setError(err instanceof Error ? err.message : 'Authentication failed');\n        if (telegramService.isTelegramApp()) {\n          telegramService.notificationOccurred('error');\n          telegramService.showAlert('Ошибка аутентификации. Пожалуйста, попробуйте позже.');\n        }\n      } finally {\n        setLoading(false);\n      }\n    };\n    initAuth();\n  }, []);\n  const logout = () => {\n    localStorage.removeItem('authToken');\n    localStorage.removeItem('user');\n    setUser(null);\n    setError(null);\n    if (telegramService.isTelegramApp()) {\n      telegramService.showAlert('Вы вышли из системы');\n    }\n  };\n  return {\n    user,\n    loading,\n    error,\n    isAuthenticated: !!user,\n    isAdmin: (user === null || user === void 0 ? void 0 : user.isAdmin) || false,\n    logout\n  };\n};\n_s(useTelegramAuth, \"PA9FxEY9xSNRrsSqaLtbYei52Hs=\");","map":{"version":3,"names":["useState","useEffect","authAPI","telegramService","useTelegramAuth","_s","user","setUser","loading","setLoading","error","setError","initAuth","savedToken","localStorage","getItem","savedUser","currentUser","getCurrentUser","err","removeItem","isTelegramApp","authData","telegramAuth","setItem","token","JSON","stringify","notificationOccurred","console","Error","message","showAlert","logout","isAuthenticated","isAdmin"],"sources":["D:/map for cur/toilet-finder-kaliningrad/frontend/src/hooks/useTelegramAuth.ts"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { authAPI } from '../services/api';\nimport { telegramService } from '../services/telegram';\n\ninterface User {\n  id: number;\n  telegram_id?: number;\n  username: string;\n  isAdmin?: boolean;\n}\n\nexport const useTelegramAuth = () => {\n  const [user, setUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const initAuth = async () => {\n      try {\n        // Проверяем, есть ли сохраненный токен\n        const savedToken = localStorage.getItem('authToken');\n        const savedUser = localStorage.getItem('user');\n\n        if (savedToken && savedUser) {\n          // Проверяем валидность токена\n          try {\n            const currentUser = await authAPI.getCurrentUser();\n            setUser(currentUser);\n            setLoading(false);\n            return;\n          } catch (err) {\n            // Токен невалидный, удаляем его\n            localStorage.removeItem('authToken');\n            localStorage.removeItem('user');\n          }\n        }\n\n        // Если мы в Telegram, пытаемся аутентифицироваться\n        if (telegramService.isTelegramApp()) {\n          const authData = await authAPI.telegramAuth();\n          \n          // Сохраняем токен и данные пользователя\n          localStorage.setItem('authToken', authData.token);\n          localStorage.setItem('user', JSON.stringify(authData.user));\n          \n          setUser(authData.user);\n          \n          // Показываем уведомление об успешной аутентификации\n          telegramService.notificationOccurred('success');\n        }\n      } catch (err) {\n        console.error('Auth error:', err);\n        setError(err instanceof Error ? err.message : 'Authentication failed');\n        \n        if (telegramService.isTelegramApp()) {\n          telegramService.notificationOccurred('error');\n          telegramService.showAlert('Ошибка аутентификации. Пожалуйста, попробуйте позже.');\n        }\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    initAuth();\n  }, []);\n\n  const logout = () => {\n    localStorage.removeItem('authToken');\n    localStorage.removeItem('user');\n    setUser(null);\n    setError(null);\n    \n    if (telegramService.isTelegramApp()) {\n      telegramService.showAlert('Вы вышли из системы');\n    }\n  };\n\n  return {\n    user,\n    loading,\n    error,\n    isAuthenticated: !!user,\n    isAdmin: user?.isAdmin || false,\n    logout,\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}