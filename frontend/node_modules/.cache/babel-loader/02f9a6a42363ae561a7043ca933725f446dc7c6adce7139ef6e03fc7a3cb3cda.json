{"ast":null,"code":"// Геокодинг через OpenStreetMap Nominatim API (бесплатный)\nconst NOMINATIM_API='https://nominatim.openstreetmap.org/search';// Cache для геокодинга\nconst geocodeCache=new Map();// Simple debounce implementation\nconst debounce=(func,delay)=>{let timeoutId;let lastResolve=null;return function(){for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}return new Promise(resolve=>{if(timeoutId){clearTimeout(timeoutId);}lastResolve=resolve;timeoutId=setTimeout(async()=>{try{const result=await func(...args);if(lastResolve){lastResolve(result);}}catch(error){if(lastResolve){lastResolve(error);}}},delay);});};};const geocodeAddressInternal=async address=>{try{// Проверяем кэш\nif(geocodeCache.has(address)){return geocodeCache.get(address);}// Добавляем \"Калининград\" для точности поиска\nconst searchQuery=\"\".concat(address,\", \\u041A\\u0430\\u043B\\u0438\\u043D\\u0438\\u043D\\u0433\\u0440\\u0430\\u0434, \\u0420\\u043E\\u0441\\u0441\\u0438\\u044F\");const controller=new AbortController();const timeoutId=setTimeout(()=>controller.abort(),5000);// 5 секунд таймаут\nconst response=await fetch(\"\".concat(NOMINATIM_API,\"?format=json&q=\").concat(encodeURIComponent(searchQuery),\"&limit=1&countrycodes=ru\"),{headers:{'User-Agent':'ToiletFinder Kaliningrad App'},signal:controller.signal});clearTimeout(timeoutId);if(!response.ok){throw new Error('Geocoding request failed');}const data=await response.json();if(data.length===0){return null;}const result=data[0];// Сохраняем в кэш\ngeocodeCache.set(address,result);return result;}catch(error){console.error('Geocoding error:',error);return null;}};// Экспортируем debounced версию\nexport const geocodeAddress=debounce(geocodeAddressInternal,500);// Валидация формата адреса\nexport const validateAddress=address=>{// Базовая проверка - должен содержать улицу и номер дома\nconst streetPatterns=[/^[а-яА-ЯёЁ\\s]+\\s+\\d+/i,// ул. Ленина 15\n/^[а-яА-ЯёЁ\\s]+\\s+[а-яА-ЯёЁ]+\\s+\\d+/i,// Ленинский проспект 30\n/^[а-яА-ЯёЁ\\s]+\\s+д\\.?\\s*\\d+/i// ул. Ленина д.15\n];return streetPatterns.some(pattern=>pattern.test(address.trim()));};// Форматирование адреса для отображения\nexport const formatAddress=address=>{return address.trim().replace(/\\s+/g,' ');};","map":{"version":3,"names":["NOMINATIM_API","geocodeCache","Map","debounce","func","delay","timeoutId","lastResolve","_len","arguments","length","args","Array","_key","Promise","resolve","clearTimeout","setTimeout","result","error","geocodeAddressInternal","address","has","get","searchQuery","concat","controller","AbortController","abort","response","fetch","encodeURIComponent","headers","signal","ok","Error","data","json","set","console","geocodeAddress","validateAddress","streetPatterns","some","pattern","test","trim","formatAddress","replace"],"sources":["d:/map for cur/toilet-finder-kaliningrad/frontend/src/services/geocoding.ts"],"sourcesContent":["// Геокодинг через OpenStreetMap Nominatim API (бесплатный)\nconst NOMINATIM_API = 'https://nominatim.openstreetmap.org/search';\n\nexport interface GeocodingResult {\n  display_name: string;\n  lat: string;\n  lon: string;\n  address: {\n    road?: string;\n    house_number?: string;\n    city?: string;\n    county?: string;\n    state?: string;\n  };\n}\n\n// Cache для геокодинга\nconst geocodeCache = new Map<string, GeocodingResult>();\n\n// Simple debounce implementation\nconst debounce = <T extends (...args: any[]) => any>(func: T, delay: number): ((...args: Parameters<T>) => Promise<ReturnType<T>>) => {\n  let timeoutId: NodeJS.Timeout;\n  let lastResolve: ((value: ReturnType<T>) => void) | null = null;\n  \n  return (...args: Parameters<T>): Promise<ReturnType<T>> => {\n    return new Promise((resolve) => {\n      if (timeoutId) {\n        clearTimeout(timeoutId);\n      }\n      \n      lastResolve = resolve as any;\n      \n      timeoutId = setTimeout(async () => {\n        try {\n          const result = await func(...args);\n          if (lastResolve) {\n            lastResolve(result);\n          }\n        } catch (error) {\n          if (lastResolve) {\n            lastResolve(error as any);\n          }\n        }\n      }, delay);\n    });\n  };\n};\n\nconst geocodeAddressInternal = async (address: string): Promise<GeocodingResult | null> => {\n  try {\n    // Проверяем кэш\n    if (geocodeCache.has(address)) {\n      return geocodeCache.get(address)!;\n    }\n\n    // Добавляем \"Калининград\" для точности поиска\n    const searchQuery = `${address}, Калининград, Россия`;\n    \n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), 5000); // 5 секунд таймаут\n    \n    const response = await fetch(\n      `${NOMINATIM_API}?format=json&q=${encodeURIComponent(searchQuery)}&limit=1&countrycodes=ru`,\n      {\n        headers: {\n          'User-Agent': 'ToiletFinder Kaliningrad App'\n        },\n        signal: controller.signal\n      }\n    );\n\n    clearTimeout(timeoutId);\n\n    if (!response.ok) {\n      throw new Error('Geocoding request failed');\n    }\n\n    const data = await response.json();\n    \n    if (data.length === 0) {\n      return null;\n    }\n\n    const result = data[0] as GeocodingResult;\n    // Сохраняем в кэш\n    geocodeCache.set(address, result);\n    return result;\n  } catch (error) {\n    console.error('Geocoding error:', error);\n    return null;\n  }\n};\n\n// Экспортируем debounced версию\nexport const geocodeAddress = debounce(geocodeAddressInternal, 500);\n\n// Валидация формата адреса\nexport const validateAddress = (address: string): boolean => {\n  // Базовая проверка - должен содержать улицу и номер дома\n  const streetPatterns = [\n    /^[а-яА-ЯёЁ\\s]+\\s+\\d+/i,  // ул. Ленина 15\n    /^[а-яА-ЯёЁ\\s]+\\s+[а-яА-ЯёЁ]+\\s+\\d+/i,  // Ленинский проспект 30\n    /^[а-яА-ЯёЁ\\s]+\\s+д\\.?\\s*\\d+/i,  // ул. Ленина д.15\n  ];\n\n  return streetPatterns.some(pattern => pattern.test(address.trim()));\n};\n\n// Форматирование адреса для отображения\nexport const formatAddress = (address: string): string => {\n  return address.trim().replace(/\\s+/g, ' ');\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}