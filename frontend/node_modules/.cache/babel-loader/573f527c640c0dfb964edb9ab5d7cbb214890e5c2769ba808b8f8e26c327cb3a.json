{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nconst api = axios.create({\n  baseURL: API_BASE_URL\n});\n\n// Add token to requests if available\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('adminToken');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\nexport const toiletAPI = {\n  // Get all approved toilets\n  getAll: () => api.get('/toilets').then(res => res.data),\n  // Get toilet by ID\n  getById: id => api.get(`/toilets/${id}`).then(res => res.data),\n  // Submit new toilet\n  submit: data => api.post('/toilets', data).then(res => res.data)\n};\nexport const authAPI = {\n  // Register admin (only first time)\n  register: (username, password) => api.post('/auth/register', {\n    username,\n    password\n  }).then(res => res.data),\n  // Login admin\n  login: (username, password) => api.post('/auth/login', {\n    username,\n    password\n  }).then(res => res.data),\n  // Get admin profile\n  getProfile: () => api.get('/admin/profile').then(res => res.data)\n};\nexport const adminAPI = {\n  // Get all toilets (including unapproved)\n  getAllToilets: status => {\n    const params = status ? `?status=${status}` : '';\n    return api.get(`/admin/toilets${params}`).then(res => res.data);\n  },\n  // Approve toilet\n  approveToilet: id => api.put(`/admin/toilets/${id}/approve`).then(res => res.data),\n  // Delete toilet\n  deleteToilet: id => api.delete(`/admin/toilets/${id}`).then(res => res.data),\n  // Update toilet\n  updateToilet: (id, data) => api.put(`/admin/toilets/${id}`, data).then(res => res.data)\n};","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","toiletAPI","getAll","get","then","res","data","getById","id","submit","post","authAPI","register","username","password","login","getProfile","adminAPI","getAllToilets","status","params","approveToilet","put","deleteToilet","delete","updateToilet"],"sources":["D:/map for cur/toilet-finder-kaliningrad/frontend/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\nimport { Toilet, ToiletFormData, Admin } from '../types';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n});\n\n// Add token to requests if available\napi.interceptors.request.use((config) => {\n  const token = localStorage.getItem('adminToken');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\nexport const toiletAPI = {\n  // Get all approved toilets\n  getAll: (): Promise<Toilet[]> => \n    api.get('/toilets').then(res => res.data),\n\n  // Get toilet by ID\n  getById: (id: number): Promise<Toilet> => \n    api.get(`/toilets/${id}`).then(res => res.data),\n\n  // Submit new toilet\n  submit: (data: ToiletFormData): Promise<{ message: string; id: number }> => \n    api.post('/toilets', data).then(res => res.data),\n};\n\nexport const authAPI = {\n  // Register admin (only first time)\n  register: (username: string, password: string): Promise<{ message: string; token: string; admin: Admin }> => \n    api.post('/auth/register', { username, password }).then(res => res.data),\n\n  // Login admin\n  login: (username: string, password: string): Promise<{ message: string; token: string; admin: Admin }> => \n    api.post('/auth/login', { username, password }).then(res => res.data),\n\n  // Get admin profile\n  getProfile: (): Promise<{ user: Admin }> => \n    api.get('/admin/profile').then(res => res.data),\n};\n\nexport const adminAPI = {\n  // Get all toilets (including unapproved)\n  getAllToilets: (status?: 'pending' | 'approved'): Promise<Toilet[]> => {\n    const params = status ? `?status=${status}` : '';\n    return api.get(`/admin/toilets${params}`).then(res => res.data);\n  },\n\n  // Approve toilet\n  approveToilet: (id: number): Promise<{ message: string }> => \n    api.put(`/admin/toilets/${id}/approve`).then(res => res.data),\n\n  // Delete toilet\n  deleteToilet: (id: number): Promise<{ message: string }> => \n    api.delete(`/admin/toilets/${id}`).then(res => res.data),\n\n  // Update toilet\n  updateToilet: (id: number, data: ToiletFormData): Promise<{ message: string }> => \n    api.put(`/admin/toilets/${id}`, data).then(res => res.data),\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAGzB,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;AAEjF,MAAMC,GAAG,GAAGL,KAAK,CAACM,MAAM,CAAC;EACvBC,OAAO,EAAEN;AACX,CAAC,CAAC;;AAEF;AACAI,GAAG,CAACG,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;EACvC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;EAChD,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACI,OAAO,CAACC,aAAa,GAAG,UAAUJ,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,CAAC;AAEF,OAAO,MAAMM,SAAS,GAAG;EACvB;EACAC,MAAM,EAAEA,CAAA,KACNb,GAAG,CAACc,GAAG,CAAC,UAAU,CAAC,CAACC,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC;EAE3C;EACAC,OAAO,EAAGC,EAAU,IAClBnB,GAAG,CAACc,GAAG,CAAC,YAAYK,EAAE,EAAE,CAAC,CAACJ,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC;EAEjD;EACAG,MAAM,EAAGH,IAAoB,IAC3BjB,GAAG,CAACqB,IAAI,CAAC,UAAU,EAAEJ,IAAI,CAAC,CAACF,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI;AACnD,CAAC;AAED,OAAO,MAAMK,OAAO,GAAG;EACrB;EACAC,QAAQ,EAAEA,CAACC,QAAgB,EAAEC,QAAgB,KAC3CzB,GAAG,CAACqB,IAAI,CAAC,gBAAgB,EAAE;IAAEG,QAAQ;IAAEC;EAAS,CAAC,CAAC,CAACV,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC;EAE1E;EACAS,KAAK,EAAEA,CAACF,QAAgB,EAAEC,QAAgB,KACxCzB,GAAG,CAACqB,IAAI,CAAC,aAAa,EAAE;IAAEG,QAAQ;IAAEC;EAAS,CAAC,CAAC,CAACV,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC;EAEvE;EACAU,UAAU,EAAEA,CAAA,KACV3B,GAAG,CAACc,GAAG,CAAC,gBAAgB,CAAC,CAACC,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI;AAClD,CAAC;AAED,OAAO,MAAMW,QAAQ,GAAG;EACtB;EACAC,aAAa,EAAGC,MAA+B,IAAwB;IACrE,MAAMC,MAAM,GAAGD,MAAM,GAAG,WAAWA,MAAM,EAAE,GAAG,EAAE;IAChD,OAAO9B,GAAG,CAACc,GAAG,CAAC,iBAAiBiB,MAAM,EAAE,CAAC,CAAChB,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC;EACjE,CAAC;EAED;EACAe,aAAa,EAAGb,EAAU,IACxBnB,GAAG,CAACiC,GAAG,CAAC,kBAAkBd,EAAE,UAAU,CAAC,CAACJ,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC;EAE/D;EACAiB,YAAY,EAAGf,EAAU,IACvBnB,GAAG,CAACmC,MAAM,CAAC,kBAAkBhB,EAAE,EAAE,CAAC,CAACJ,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC;EAE1D;EACAmB,YAAY,EAAEA,CAACjB,EAAU,EAAEF,IAAoB,KAC7CjB,GAAG,CAACiC,GAAG,CAAC,kBAAkBd,EAAE,EAAE,EAAEF,IAAI,CAAC,CAACF,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI;AAC9D,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}