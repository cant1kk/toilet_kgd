{"ast":null,"code":"var _jsxFileName = \"D:\\\\map for cur\\\\toilet-finder-kaliningrad\\\\frontend\\\\src\\\\components\\\\MapPage.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { MapContainer, TileLayer, Marker, Popup, useMapEvents } from 'react-leaflet';\nimport { Icon, LatLngBounds } from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport { toiletAPI } from '../services/api';\nimport { telegramService } from '../services/telegram';\nimport { useTelegramAuth } from '../hooks/useTelegramAuth';\nimport AddToiletModal from './AddToiletModal';\nimport Legend from './Legend';\nimport '../styles/map.css';\n\n// Fix для иконок Leaflet в React\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\ndelete Icon.Default.prototype._getIconUrl;\nIcon.Default.mergeOptions({\n  iconRetinaUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon-2x.png',\n  iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png',\n  shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png'\n});\n// Компонент для обработки событий карты\nfunction MapEventHandler({\n  onMapClick\n}) {\n  _s();\n  useMapEvents({\n    click: e => {\n      onMapClick(e.latlng.lat, e.latlng.lng);\n    }\n  });\n  return null;\n}\n_s(MapEventHandler, \"Ld/tk8Iz8AdZhC1l7acENaOEoCo=\", false, function () {\n  return [useMapEvents];\n});\n_c = MapEventHandler;\nconst MapPage = ({\n  initialUserLocation,\n  isTelegram\n}) => {\n  _s2();\n  const [toilets, setToilets] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [showAddModal, setShowAddModal] = useState(false);\n  const [selectedPosition, setSelectedPosition] = useState(null);\n  const [userLocation, setUserLocation] = useState(initialUserLocation || null);\n  const [error, setError] = useState(null);\n  const {\n    user\n  } = useTelegramAuth();\n\n  // Загрузка туалетов\n  const loadToilets = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const data = await toiletAPI.getApproved();\n      setToilets(data);\n    } catch (err) {\n      console.error('Error loading toilets:', err);\n      setError('Не удалось загрузить данные о туалетах');\n      if (isTelegram) {\n        telegramService.showAlert('Не удалось загрузить данные. Попробуйте обновить страницу.');\n      }\n    } finally {\n      setLoading(false);\n    }\n  }, [isTelegram]);\n  useEffect(() => {\n    loadToilets();\n  }, [loadToilets]);\n\n  // Получение геолокации пользователя\n  useEffect(() => {\n    if (!userLocation && navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const location = {\n          lat: position.coords.latitude,\n          lon: position.coords.longitude\n        };\n        setUserLocation(location);\n\n        // Поиск близлежащих туалетов\n        findNearbyToilets(location.lat, location.lon);\n      }, error => {\n        console.warn('Geolocation error:', error);\n        if (isTelegram) {\n          telegramService.showAlert('Не удалось определить ваше местоположение');\n        }\n      });\n    }\n  }, [userLocation, isTelegram]);\n\n  //Поиск близлежащих туалетов\n  const findNearbyToilets = async (lat, lon) => {\n    try {\n      const nearby = await toiletAPI.findNearby(lat, lon, 5000); // 5km radius\n      if (nearby.length > 0) {\n        setToilets(prev => {\n          // Объединяем с существующими, удаляя дубликаты\n          const existingIds = new Set(prev.map(t => t.id));\n          const newToilets = nearby.filter(t => !existingIds.has(t.id));\n          return [...prev, ...newToilets];\n        });\n        if (isTelegram) {\n          telegramService.notificationOccurred('success');\n        }\n      }\n    } catch (err) {\n      console.error('Error finding nearby toilets:', err);\n    }\n  };\n\n  // Обработка клика по карте\n  const handleMapClick = (lat, lng) => {\n    if (!user) {\n      if (isTelegram) {\n        telegramService.showAlert('Для добавления точек необходимо авторизоваться');\n      } else {\n        alert('Для добавления точек необходимо авторизоваться');\n      }\n      return;\n    }\n    setSelectedPosition({\n      lat,\n      lng\n    });\n    setShowAddModal(true);\n    if (isTelegram) {\n      telegramService.impactOccurred('light');\n    }\n  };\n\n  // Добавление нового туалета\n  const handleAddToilet = async toiletData => {\n    try {\n      await toiletAPI.add(toiletData);\n      setShowAddModal(false);\n      setSelectedPosition(null);\n\n      // Перезагружаем список\n      await loadToilets();\n      if (isTelegram) {\n        telegramService.showAlert('Точка успешно добавлена и будет проверена модератором');\n        telegramService.notificationOccurred('success');\n      } else {\n        alert('Точка успешно добавлена и будет проверена модератором');\n      }\n    } catch (err) {\n      console.error('Error adding toilet:', err);\n      if (isTelegram) {\n        telegramService.showAlert('Не удалось добавить точку. Попробуйте позже.');\n        telegramService.notificationOccurred('error');\n      } else {\n        alert('Не удалось добавить точку. Попробуйте позже.');\n      }\n    }\n  };\n\n  // Определение иконки маркера\n  const getMarkerIcon = type => {\n    const iconUrls = {\n      free: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-green.png',\n      paid: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-red.png',\n      purchase_required: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-yellow.png'\n    };\n    return new Icon({\n      iconUrl: iconUrls[type],\n      shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png',\n      iconSize: [25, 41],\n      iconAnchor: [12, 41],\n      popupAnchor: [1, -34],\n      shadowSize: [41, 41]\n    });\n  };\n\n  // Определение центра карты\n  const getMapCenter = () => {\n    if (userLocation) {\n      return [userLocation.lat, userLocation.lon];\n    }\n    // Центр Калининграда\n    return [54.710, 20.510];\n  };\n\n  // Определение границ для показа всех маркеров\n  const getMapBounds = () => {\n    if (toilets.length === 0) return null;\n    const bounds = new LatLngBounds([[toilets[0].latitude, toilets[0].longitude], [toilets[0].latitude, toilets[0].longitude]]);\n    toilets.forEach(toilet => {\n      bounds.extend([toilet.latitude, toilet.longitude]);\n    });\n    if (userLocation) {\n      bounds.extend([userLocation.lat, userLocation.lon]);\n    }\n    return bounds;\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-loading\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"spinner-border text-primary\",\n        role: \"status\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"visually-hidden\",\n          children: \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430 \\u043A\\u0430\\u0440\\u0442\\u044B...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-error\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"alert alert-danger\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary\",\n        onClick: loadToilets,\n        children: \"\\u041F\\u043E\\u043F\\u0440\\u043E\\u0431\\u043E\\u0432\\u0430\\u0442\\u044C \\u0441\\u043D\\u043E\\u0432\\u0430\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `map-page ${isTelegram ? 'telegram-map' : ''}`,\n    children: [/*#__PURE__*/_jsxDEV(MapContainer, {\n      center: getMapCenter(),\n      zoom: 13,\n      className: \"map-container\",\n      bounds: getMapBounds() || undefined,\n      boundsOptions: {\n        padding: [50, 50]\n      },\n      children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n        attribution: \"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\",\n        url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MapEventHandler, {\n        onMapClick: handleMapClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 9\n      }, this), userLocation && /*#__PURE__*/_jsxDEV(Marker, {\n        position: [userLocation.lat, userLocation.lon],\n        icon: new Icon({\n          iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-blue.png',\n          shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png',\n          iconSize: [25, 41],\n          iconAnchor: [12, 41],\n          popupAnchor: [1, -34],\n          shadowSize: [41, 41]\n        }),\n        children: /*#__PURE__*/_jsxDEV(Popup, {\n          children: /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"\\u0412\\u0430\\u0448\\u0435 \\u043C\\u0435\\u0441\\u0442\\u043E\\u043F\\u043E\\u043B\\u043E\\u0436\\u0435\\u043D\\u0438\\u0435\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 257,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 11\n      }, this), toilets.map(toilet => /*#__PURE__*/_jsxDEV(Marker, {\n        position: [toilet.latitude, toilet.longitude],\n        icon: getMarkerIcon(toilet.type),\n        children: /*#__PURE__*/_jsxDEV(Popup, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"toilet-popup\",\n            children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n              children: toilet.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 271,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"mb-1\",\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"\\u0410\\u0434\\u0440\\u0435\\u0441:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 273,\n                columnNumber: 19\n              }, this), \" \", toilet.address]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 272,\n              columnNumber: 17\n            }, this), toilet.price && /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"mb-1\",\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"\\u0426\\u0435\\u043D\\u0430:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 277,\n                columnNumber: 21\n              }, this), \" \", toilet.price]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 276,\n              columnNumber: 19\n            }, this), toilet.description && /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"mb-1\",\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"\\u041E\\u043F\\u0438\\u0441\\u0430\\u043D\\u0438\\u0435:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 282,\n                columnNumber: 21\n              }, this), \" \", toilet.description]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 281,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"mb-0\",\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                className: `badge bg-${toilet.type === 'free' ? 'success' : toilet.type === 'paid' ? 'danger' : 'warning'}`,\n                children: toilet.type === 'free' ? 'Бесплатный' : toilet.type === 'paid' ? 'Платный' : 'За покупку'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 286,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 285,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 270,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 13\n        }, this)\n      }, toilet.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Legend, {\n      isTelegram: isTelegram\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AddToiletModal, {\n      show: showAddModal,\n      onHide: () => {\n        setShowAddModal(false);\n        setSelectedPosition(null);\n      },\n      onAdd: handleAddToilet,\n      initialPosition: selectedPosition,\n      isTelegram: isTelegram\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 228,\n    columnNumber: 5\n  }, this);\n};\n_s2(MapPage, \"OiMo6VdWPVIGoAfqkR37c8Fku9M=\", false, function () {\n  return [useTelegramAuth];\n});\n_c2 = MapPage;\nexport default MapPage;\nvar _c, _c2;\n$RefreshReg$(_c, \"MapEventHandler\");\n$RefreshReg$(_c2, \"MapPage\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","MapContainer","TileLayer","Marker","Popup","useMapEvents","Icon","LatLngBounds","toiletAPI","telegramService","useTelegramAuth","AddToiletModal","Legend","jsxDEV","_jsxDEV","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","iconUrl","shadowUrl","MapEventHandler","onMapClick","_s","click","e","latlng","lat","lng","_c","MapPage","initialUserLocation","isTelegram","_s2","toilets","setToilets","loading","setLoading","showAddModal","setShowAddModal","selectedPosition","setSelectedPosition","userLocation","setUserLocation","error","setError","user","loadToilets","data","getApproved","err","console","showAlert","navigator","geolocation","getCurrentPosition","position","location","coords","latitude","lon","longitude","findNearbyToilets","warn","nearby","findNearby","length","prev","existingIds","Set","map","t","id","newToilets","filter","has","notificationOccurred","handleMapClick","alert","impactOccurred","handleAddToilet","toiletData","add","getMarkerIcon","type","iconUrls","free","paid","purchase_required","iconSize","iconAnchor","popupAnchor","shadowSize","getMapCenter","getMapBounds","bounds","forEach","toilet","extend","className","children","role","fileName","_jsxFileName","lineNumber","columnNumber","onClick","center","zoom","undefined","boundsOptions","padding","attribution","url","icon","name","address","price","description","show","onHide","onAdd","initialPosition","_c2","$RefreshReg$"],"sources":["D:/map for cur/toilet-finder-kaliningrad/frontend/src/components/MapPage.tsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { MapContainer, TileLayer, Marker, Popup, useMapEvents } from 'react-leaflet';\nimport { Icon, LatLngBounds } from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport { toiletAPI } from '../services/api';\nimport { Toilet } from '../types';\nimport { telegramService } from '../services/telegram';\nimport { useTelegramAuth } from '../hooks/useTelegramAuth';\nimport AddToiletModal from './AddToiletModal';\nimport Legend from './Legend';\nimport '../styles/map.css';\n\n// Fix для иконок Leaflet в React\ndelete (Icon.Default.prototype as any)._getIconUrl;\nIcon.Default.mergeOptions({\n  iconRetinaUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon-2x.png',\n  iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png',\n  shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png',\n});\n\ninterface MapPageProps {\n  initialUserLocation?: { lat: number; lon: number } | null;\n  isTelegram: boolean;\n}\n\n// Компонент для обработки событий карты\nfunction MapEventHandler({ onMapClick }: { onMapClick: (lat: number, lng: number) => void }) {\n  useMapEvents({\n    click: (e) => {\n      onMapClick(e.latlng.lat, e.latlng.lng);\n    },\n  });\n  return null;\n}\n\nconst MapPage: React.FC<MapPageProps> = ({ initialUserLocation, isTelegram }) => {\n  const [toilets, setToilets] = useState<Toilet[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [showAddModal, setShowAddModal] = useState(false);\n  const [selectedPosition, setSelectedPosition] = useState<{ lat: number; lng: number } | null>(null);\n  const [userLocation, setUserLocation] = useState<{ lat: number; lon: number } | null>(initialUserLocation || null);\n  const [error, setError] = useState<string | null>(null);\n  const { user } = useTelegramAuth();\n\n  // Загрузка туалетов\n  const loadToilets = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const data = await toiletAPI.getApproved();\n      setToilets(data);\n    } catch (err) {\n      console.error('Error loading toilets:', err);\n      setError('Не удалось загрузить данные о туалетах');\n      \n      if (isTelegram) {\n        telegramService.showAlert('Не удалось загрузить данные. Попробуйте обновить страницу.');\n      }\n    } finally {\n      setLoading(false);\n    }\n  }, [isTelegram]);\n\n  useEffect(() => {\n    loadToilets();\n  }, [loadToilets]);\n\n  // Получение геолокации пользователя\n  useEffect(() => {\n    if (!userLocation && navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          const location = {\n            lat: position.coords.latitude,\n            lon: position.coords.longitude,\n          };\n          setUserLocation(location);\n          \n          // Поиск близлежащих туалетов\n          findNearbyToilets(location.lat, location.lon);\n        },\n        (error) => {\n          console.warn('Geolocation error:', error);\n          if (isTelegram) {\n            telegramService.showAlert('Не удалось определить ваше местоположение');\n          }\n        }\n      );\n    }\n  }, [userLocation, isTelegram]);\n\n  //Поиск близлежащих туалетов\n  const findNearbyToilets = async (lat: number, lon: number) => {\n    try {\n      const nearby = await toiletAPI.findNearby(lat, lon, 5000); // 5km radius\n      if (nearby.length > 0) {\n        setToilets(prev => {\n          // Объединяем с существующими, удаляя дубликаты\n          const existingIds = new Set(prev.map(t => t.id));\n          const newToilets = nearby.filter(t => !existingIds.has(t.id));\n          return [...prev, ...newToilets];\n        });\n        \n        if (isTelegram) {\n          telegramService.notificationOccurred('success');\n        }\n      }\n    } catch (err) {\n      console.error('Error finding nearby toilets:', err);\n    }\n  };\n\n  // Обработка клика по карте\n  const handleMapClick = (lat: number, lng: number) => {\n    if (!user) {\n      if (isTelegram) {\n        telegramService.showAlert('Для добавления точек необходимо авторизоваться');\n      } else {\n        alert('Для добавления точек необходимо авторизоваться');\n      }\n      return;\n    }\n\n    setSelectedPosition({ lat, lng });\n    setShowAddModal(true);\n    \n    if (isTelegram) {\n      telegramService.impactOccurred('light');\n    }\n  };\n\n  // Добавление нового туалета\n  const handleAddToilet = async (toiletData: Omit<Toilet, 'id' | 'approved' | 'created_at'>) => {\n    try {\n      await toiletAPI.add(toiletData);\n      setShowAddModal(false);\n      setSelectedPosition(null);\n      \n      // Перезагружаем список\n      await loadToilets();\n      \n      if (isTelegram) {\n        telegramService.showAlert('Точка успешно добавлена и будет проверена модератором');\n        telegramService.notificationOccurred('success');\n      } else {\n        alert('Точка успешно добавлена и будет проверена модератором');\n      }\n    } catch (err) {\n      console.error('Error adding toilet:', err);\n      \n      if (isTelegram) {\n        telegramService.showAlert('Не удалось добавить точку. Попробуйте позже.');\n        telegramService.notificationOccurred('error');\n      } else {\n        alert('Не удалось добавить точку. Попробуйте позже.');\n      }\n    }\n  };\n\n  // Определение иконки маркера\n  const getMarkerIcon = (type: Toilet['type']) => {\n    const iconUrls = {\n      free: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-green.png',\n      paid: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-red.png',\n      purchase_required: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-yellow.png',\n    };\n\n    return new Icon({\n      iconUrl: iconUrls[type],\n      shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png',\n      iconSize: [25, 41],\n      iconAnchor: [12, 41],\n      popupAnchor: [1, -34],\n      shadowSize: [41, 41],\n    });\n  };\n\n  // Определение центра карты\n  const getMapCenter = () => {\n    if (userLocation) {\n      return [userLocation.lat, userLocation.lon] as [number, number];\n    }\n    // Центр Калининграда\n    return [54.710, 20.510] as [number, number];\n  };\n\n  // Определение границ для показа всех маркеров\n  const getMapBounds = () => {\n    if (toilets.length === 0) return null;\n    \n    const bounds = new LatLngBounds([[toilets[0].latitude, toilets[0].longitude], [toilets[0].latitude, toilets[0].longitude]]);\n    toilets.forEach(toilet => {\n      bounds.extend([toilet.latitude, toilet.longitude]);\n    });\n    \n    if (userLocation) {\n      bounds.extend([userLocation.lat, userLocation.lon]);\n    }\n    \n    return bounds;\n  };\n\n  if (loading) {\n    return (\n      <div className=\"map-loading\">\n        <div className=\"spinner-border text-primary\" role=\"status\">\n          <span className=\"visually-hidden\">Загрузка...</span>\n        </div>\n        <p>Загрузка карты...</p>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"map-error\">\n        <div className=\"alert alert-danger\">\n          {error}\n        </div>\n        <button className=\"btn btn-primary\" onClick={loadToilets}>\n          Попробовать снова\n        </button>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`map-page ${isTelegram ? 'telegram-map' : ''}`}>\n      <MapContainer\n        center={getMapCenter()}\n        zoom={13}\n        className=\"map-container\"\n        bounds={getMapBounds() || undefined}\n        boundsOptions={{ padding: [50, 50] }}\n      >\n        <TileLayer\n          attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        \n        <MapEventHandler onMapClick={handleMapClick} />\n\n        {/* Маркер пользователя */}\n        {userLocation && (\n          <Marker\n            position={[userLocation.lat, userLocation.lon]}\n            icon={new Icon({\n              iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-blue.png',\n              shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png',\n              iconSize: [25, 41],\n              iconAnchor: [12, 41],\n              popupAnchor: [1, -34],\n              shadowSize: [41, 41],\n            })}\n          >\n            <Popup>\n              <strong>Ваше местоположение</strong>\n            </Popup>\n          </Marker>\n        )}\n\n        {/* Маркеры туалетов */}\n        {toilets.map((toilet) => (\n          <Marker\n            key={toilet.id}\n            position={[toilet.latitude, toilet.longitude]}\n            icon={getMarkerIcon(toilet.type)}\n          >\n            <Popup>\n              <div className=\"toilet-popup\">\n                <h6>{toilet.name}</h6>\n                <p className=\"mb-1\">\n                  <strong>Адрес:</strong> {toilet.address}\n                </p>\n                {toilet.price && (\n                  <p className=\"mb-1\">\n                    <strong>Цена:</strong> {toilet.price}\n                  </p>\n                )}\n                {toilet.description && (\n                  <p className=\"mb-1\">\n                    <strong>Описание:</strong> {toilet.description}\n                  </p>\n                )}\n                <p className=\"mb-0\">\n                  <span className={`badge bg-${toilet.type === 'free' ? 'success' : toilet.type === 'paid' ? 'danger' : 'warning'}`}>\n                    {toilet.type === 'free' ? 'Бесплатный' : toilet.type === 'paid' ? 'Платный' : 'За покупку'}\n                  </span>\n                </p>\n              </div>\n            </Popup>\n          </Marker>\n        ))}\n      </MapContainer>\n\n      {/* Легенда */}\n      <Legend isTelegram={isTelegram} />\n\n      {/* Модальное окно добавления туалета */}\n      <AddToiletModal\n        show={showAddModal}\n        onHide={() => {\n          setShowAddModal(false);\n          setSelectedPosition(null);\n        }}\n        onAdd={handleAddToilet}\n        initialPosition={selectedPosition}\n        isTelegram={isTelegram}\n      />\n    </div>\n  );\n};\n\nexport default MapPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}