{"ast":null,"code":"// Геокодинг через OpenStreetMap Nominatim API (бесплатный)\nconst NOMINATIM_API = 'https://nominatim.openstreetmap.org/search';\nexport const geocodeAddress = async address => {\n  try {\n    // Добавляем \"Калининград\" для точности поиска\n    const searchQuery = `${address}, Калининград, Россия`;\n    const response = await fetch(`${NOMINATIM_API}?format=json&q=${encodeURIComponent(searchQuery)}&limit=1&countrycodes=ru`, {\n      headers: {\n        'User-Agent': 'ToiletFinder Kaliningrad App'\n      }\n    });\n    if (!response.ok) {\n      throw new Error('Geocoding request failed');\n    }\n    const data = await response.json();\n    if (data.length === 0) {\n      return null;\n    }\n    return data[0];\n  } catch (error) {\n    console.error('Geocoding error:', error);\n    return null;\n  }\n};\n\n// Валидация формата адреса\nexport const validateAddress = address => {\n  // Базовая проверка - должен содержать улицу и номер дома\n  const streetPatterns = [/^[а-яА-ЯёЁ\\s]+\\s+\\d+/i,\n  // ул. Ленина 15\n  /^[а-яА-ЯёЁ\\s]+\\s+[а-яА-ЯёЁ]+\\s+\\d+/i,\n  // Ленинский проспект 30\n  /^[а-яА-ЯёЁ\\s]+\\s+д\\.?\\s*\\d+/i // ул. Ленина д.15\n  ];\n  return streetPatterns.some(pattern => pattern.test(address.trim()));\n};\n\n// Форматирование адреса для отображения\nexport const formatAddress = address => {\n  return address.trim().replace(/\\s+/g, ' ');\n};","map":{"version":3,"names":["NOMINATIM_API","geocodeAddress","address","searchQuery","response","fetch","encodeURIComponent","headers","ok","Error","data","json","length","error","console","validateAddress","streetPatterns","some","pattern","test","trim","formatAddress","replace"],"sources":["d:/map for cur/toilet-finder-kaliningrad/frontend/src/services/geocoding.ts"],"sourcesContent":["// Геокодинг через OpenStreetMap Nominatim API (бесплатный)\nconst NOMINATIM_API = 'https://nominatim.openstreetmap.org/search';\n\nexport interface GeocodingResult {\n  display_name: string;\n  lat: string;\n  lon: string;\n  address: {\n    road?: string;\n    house_number?: string;\n    city?: string;\n    county?: string;\n    state?: string;\n  };\n}\n\nexport const geocodeAddress = async (address: string): Promise<GeocodingResult | null> => {\n  try {\n    // Добавляем \"Калининград\" для точности поиска\n    const searchQuery = `${address}, Калининград, Россия`;\n    \n    const response = await fetch(\n      `${NOMINATIM_API}?format=json&q=${encodeURIComponent(searchQuery)}&limit=1&countrycodes=ru`,\n      {\n        headers: {\n          'User-Agent': 'ToiletFinder Kaliningrad App'\n        }\n      }\n    );\n\n    if (!response.ok) {\n      throw new Error('Geocoding request failed');\n    }\n\n    const data = await response.json();\n    \n    if (data.length === 0) {\n      return null;\n    }\n\n    return data[0] as GeocodingResult;\n  } catch (error) {\n    console.error('Geocoding error:', error);\n    return null;\n  }\n};\n\n// Валидация формата адреса\nexport const validateAddress = (address: string): boolean => {\n  // Базовая проверка - должен содержать улицу и номер дома\n  const streetPatterns = [\n    /^[а-яА-ЯёЁ\\s]+\\s+\\d+/i,  // ул. Ленина 15\n    /^[а-яА-ЯёЁ\\s]+\\s+[а-яА-ЯёЁ]+\\s+\\d+/i,  // Ленинский проспект 30\n    /^[а-яА-ЯёЁ\\s]+\\s+д\\.?\\s*\\d+/i,  // ул. Ленина д.15\n  ];\n\n  return streetPatterns.some(pattern => pattern.test(address.trim()));\n};\n\n// Форматирование адреса для отображения\nexport const formatAddress = (address: string): string => {\n  return address.trim().replace(/\\s+/g, ' ');\n};"],"mappings":"AAAA;AACA,MAAMA,aAAa,GAAG,4CAA4C;AAelE,OAAO,MAAMC,cAAc,GAAG,MAAOC,OAAe,IAAsC;EACxF,IAAI;IACF;IACA,MAAMC,WAAW,GAAG,GAAGD,OAAO,uBAAuB;IAErD,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAC1B,GAAGL,aAAa,kBAAkBM,kBAAkB,CAACH,WAAW,CAAC,0BAA0B,EAC3F;MACEI,OAAO,EAAE;QACP,YAAY,EAAE;MAChB;IACF,CACF,CAAC;IAED,IAAI,CAACH,QAAQ,CAACI,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;IAC7C;IAEA,MAAMC,IAAI,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;IAElC,IAAID,IAAI,CAACE,MAAM,KAAK,CAAC,EAAE;MACrB,OAAO,IAAI;IACb;IAEA,OAAOF,IAAI,CAAC,CAAC,CAAC;EAChB,CAAC,CAAC,OAAOG,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;IACxC,OAAO,IAAI;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAME,eAAe,GAAIb,OAAe,IAAc;EAC3D;EACA,MAAMc,cAAc,GAAG,CACrB,uBAAuB;EAAG;EAC1B,qCAAqC;EAAG;EACxC,8BAA8B,CAAG;EAAA,CAClC;EAED,OAAOA,cAAc,CAACC,IAAI,CAACC,OAAO,IAAIA,OAAO,CAACC,IAAI,CAACjB,OAAO,CAACkB,IAAI,CAAC,CAAC,CAAC,CAAC;AACrE,CAAC;;AAED;AACA,OAAO,MAAMC,aAAa,GAAInB,OAAe,IAAa;EACxD,OAAOA,OAAO,CAACkB,IAAI,CAAC,CAAC,CAACE,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC;AAC5C,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}