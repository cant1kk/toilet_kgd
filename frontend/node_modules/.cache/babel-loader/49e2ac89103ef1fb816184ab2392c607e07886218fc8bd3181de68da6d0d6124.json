{"ast":null,"code":"import axios from 'axios';\nimport { telegramService } from './telegram';\n\n// Базовый URL API\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\n// Создаем экземпляр axios с настройками\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Перехватчик для добавления токена авторизации\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('authToken');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n\n  // Если мы в Telegram, добавляем initData\n  if (telegramService.isTelegramApp()) {\n    var _window$Telegram, _window$Telegram$WebA;\n    const initData = (_window$Telegram = window.Telegram) === null || _window$Telegram === void 0 ? void 0 : (_window$Telegram$WebA = _window$Telegram.WebApp) === null || _window$Telegram$WebA === void 0 ? void 0 : _window$Telegram$WebA.initData;\n    if (initData) {\n      config.headers['X-Telegram-Init-Data'] = initData;\n    }\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Перехватчик для обработки ошибок\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    // Токен истек, удаляем его\n    localStorage.removeItem('authToken');\n    localStorage.removeItem('user');\n\n    // Если в Telegram, можно показать сообщение и закрыть приложение\n    if (telegramService.isTelegramApp()) {\n      telegramService.showAlert('Сессия истекла. Пожалуйста, перезапустите приложение.');\n    }\n  }\n  return Promise.reject(error);\n});\n\n// Интерфейсы\n\n// API функции\nexport const toiletAPI = {\n  // Получение всех туалетов\n  getAll: async () => {\n    const response = await api.get('/toilets');\n    return response.data;\n  },\n  // Получение утвержденных туалетов\n  getApproved: async () => {\n    const response = await api.get('/toilets/approved');\n    return response.data;\n  },\n  // Добавление нового туалета\n  add: async toilet => {\n    const response = await api.post('/toilets', toilet);\n    return response.data;\n  },\n  // Обновление туалета\n  update: async (id, toilet) => {\n    const response = await api.put(`/toilets/${id}`, toilet);\n    return response.data;\n  },\n  // Удаление туалета\n  delete: async id => {\n    await api.delete(`/toilets/${id}`);\n  },\n  // Поиск близлежащих туалетов\n  findNearby: async (lat, lon, radius = 5000) => {\n    const response = await api.get(`/toilets/nearby?lat=${lat}&lon=${lon}&radius=${radius}`);\n    return response.data;\n  }\n};\n\n// API аутентификации\nexport const authAPI = {\n  // Вход администратора\n  login: async (username, password) => {\n    const response = await api.post('/auth/login', {\n      username,\n      password\n    });\n    return response.data;\n  },\n  // Регистрация администратора\n  register: async (username, password) => {\n    const response = await api.post('/auth/register', {\n      username,\n      password\n    });\n    return response.data;\n  },\n  // Telegram аутентификация\n  telegramAuth: async () => {\n    var _window$Telegram2, _window$Telegram2$Web;\n    if (!telegramService.isTelegramApp()) {\n      throw new Error('Not in Telegram WebApp');\n    }\n    const initData = (_window$Telegram2 = window.Telegram) === null || _window$Telegram2 === void 0 ? void 0 : (_window$Telegram2$Web = _window$Telegram2.WebApp) === null || _window$Telegram2$Web === void 0 ? void 0 : _window$Telegram2$Web.initData;\n    if (!initData) {\n      throw new Error('No init data available');\n    }\n    const response = await api.post('/telegram/auth', {\n      initData\n    });\n    return response.data;\n  },\n  // Получение информации о текущем пользователе\n  getCurrentUser: async () => {\n    const response = await api.get('/telegram/me');\n    return response.data;\n  }\n};\n\n// API администратора\nexport const adminAPI = {\n  // Получение статистики\n  getStats: async () => {\n    const response = await api.get('/admin/stats');\n    return response.data;\n  },\n  // Получение всех туалетов (включая неутвержденные)\n  getAllToilets: async () => {\n    const response = await api.get('/admin/toilets');\n    return response.data;\n  },\n  // Утверждение туалета\n  approveToilet: async id => {\n    const response = await api.put(`/admin/toilets/${id}/approve`);\n    return response.data;\n  },\n  // Отклонение туалета\n  rejectToilet: async id => {\n    await api.delete(`/admin/toilets/${id}`);\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","telegramService","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","timeout","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","isTelegramApp","_window$Telegram","_window$Telegram$WebA","initData","window","Telegram","WebApp","error","Promise","reject","response","_error$response","status","removeItem","showAlert","toiletAPI","getAll","get","data","getApproved","add","toilet","post","update","id","put","delete","findNearby","lat","lon","radius","authAPI","login","username","password","register","telegramAuth","_window$Telegram2","_window$Telegram2$Web","Error","getCurrentUser","adminAPI","getStats","getAllToilets","approveToilet","rejectToilet"],"sources":["D:/map for cur/toilet-finder-kaliningrad/frontend/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\nimport { Toilet, ToiletFormData, Admin, User } from '../types';\nimport { telegramService } from './telegram';\n\n// Базовый URL API\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\n// Создаем экземпляр axios с настройками\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Перехватчик для добавления токена авторизации\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('authToken');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    \n    // Если мы в Telegram, добавляем initData\n    if (telegramService.isTelegramApp()) {\n      const initData = window.Telegram?.WebApp?.initData;\n      if (initData) {\n        config.headers['X-Telegram-Init-Data'] = initData;\n      }\n    }\n    \n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Перехватчик для обработки ошибок\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response?.status === 401) {\n      // Токен истек, удаляем его\n      localStorage.removeItem('authToken');\n      localStorage.removeItem('user');\n      \n      // Если в Telegram, можно показать сообщение и закрыть приложение\n      if (telegramService.isTelegramApp()) {\n        telegramService.showAlert('Сессия истекла. Пожалуйста, перезапустите приложение.');\n      }\n    }\n    return Promise.reject(error);\n  }\n);\n\n// Интерфейсы\n\n// API функции\nexport const toiletAPI = {\n  // Получение всех туалетов\n  getAll: async (): Promise<Toilet[]> => {\n    const response = await api.get('/toilets');\n    return response.data;\n  },\n\n  // Получение утвержденных туалетов\n  getApproved: async (): Promise<Toilet[]> => {\n    const response = await api.get('/toilets/approved');\n    return response.data;\n  },\n\n  // Добавление нового туалета\n  add: async (toilet: Omit<Toilet, 'id' | 'approved' | 'created_at'>): Promise<Toilet> => {\n    const response = await api.post('/toilets', toilet);\n    return response.data;\n  },\n\n  // Обновление туалета\n  update: async (id: number, toilet: Partial<Toilet>): Promise<Toilet> => {\n    const response = await api.put(`/toilets/${id}`, toilet);\n    return response.data;\n  },\n\n  // Удаление туалета\n  delete: async (id: number): Promise<void> => {\n    await api.delete(`/toilets/${id}`);\n  },\n\n  // Поиск близлежащих туалетов\n  findNearby: async (lat: number, lon: number, radius: number = 5000): Promise<Toilet[]> => {\n    const response = await api.get(`/toilets/nearby?lat=${lat}&lon=${lon}&radius=${radius}`);\n    return response.data;\n  },\n};\n\n// API аутентификации\nexport const authAPI = {\n  // Вход администратора\n  login: async (username: string, password: string) => {\n    const response = await api.post('/auth/login', { username, password });\n    return response.data;\n  },\n\n  // Регистрация администратора\n  register: async (username: string, password: string) => {\n    const response = await api.post('/auth/register', { username, password });\n    return response.data;\n  },\n\n  // Telegram аутентификация\n  telegramAuth: async () => {\n    if (!telegramService.isTelegramApp()) {\n      throw new Error('Not in Telegram WebApp');\n    }\n\n    const initData = window.Telegram?.WebApp?.initData;\n    if (!initData) {\n      throw new Error('No init data available');\n    }\n\n    const response = await api.post('/telegram/auth', { initData });\n    return response.data;\n  },\n\n  // Получение информации о текущем пользователе\n  getCurrentUser: async (): Promise<User> => {\n    const response = await api.get('/telegram/me');\n    return response.data;\n  },\n};\n\n// API администратора\nexport const adminAPI = {\n  // Получение статистики\n  getStats: async () => {\n    const response = await api.get('/admin/stats');\n    return response.data;\n  },\n\n  // Получение всех туалетов (включая неутвержденные)\n  getAllToilets: async (): Promise<Toilet[]> => {\n    const response = await api.get('/admin/toilets');\n    return response.data;\n  },\n\n  // Утверждение туалета\n  approveToilet: async (id: number): Promise<Toilet> => {\n    const response = await api.put(`/admin/toilets/${id}/approve`);\n    return response.data;\n  },\n\n  // Отклонение туалета\n  rejectToilet: async (id: number): Promise<void> => {\n    await api.delete(`/admin/toilets/${id}`);\n  },\n};\n\nexport default api;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,SAASC,eAAe,QAAQ,YAAY;;AAE5C;AACA,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;;AAEjF;AACA,MAAMC,GAAG,GAAGN,KAAK,CAACO,MAAM,CAAC;EACvBC,OAAO,EAAEN,YAAY;EACrBO,OAAO,EAAE,KAAK;EACdC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAJ,GAAG,CAACK,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;EAC/C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAACQ,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;;EAEA;EACA,IAAId,eAAe,CAACkB,aAAa,CAAC,CAAC,EAAE;IAAA,IAAAC,gBAAA,EAAAC,qBAAA;IACnC,MAAMC,QAAQ,IAAAF,gBAAA,GAAGG,MAAM,CAACC,QAAQ,cAAAJ,gBAAA,wBAAAC,qBAAA,GAAfD,gBAAA,CAAiBK,MAAM,cAAAJ,qBAAA,uBAAvBA,qBAAA,CAAyBC,QAAQ;IAClD,IAAIA,QAAQ,EAAE;MACZR,MAAM,CAACJ,OAAO,CAAC,sBAAsB,CAAC,GAAGY,QAAQ;IACnD;EACF;EAEA,OAAOR,MAAM;AACf,CAAC,EACAY,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACApB,GAAG,CAACK,YAAY,CAACkB,QAAQ,CAAChB,GAAG,CAC1BgB,QAAQ,IAAKA,QAAQ,EACrBH,KAAK,IAAK;EAAA,IAAAI,eAAA;EACT,IAAI,EAAAA,eAAA,GAAAJ,KAAK,CAACG,QAAQ,cAAAC,eAAA,uBAAdA,eAAA,CAAgBC,MAAM,MAAK,GAAG,EAAE;IAClC;IACAf,YAAY,CAACgB,UAAU,CAAC,WAAW,CAAC;IACpChB,YAAY,CAACgB,UAAU,CAAC,MAAM,CAAC;;IAE/B;IACA,IAAI/B,eAAe,CAACkB,aAAa,CAAC,CAAC,EAAE;MACnClB,eAAe,CAACgC,SAAS,CAAC,uDAAuD,CAAC;IACpF;EACF;EACA,OAAON,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;;AAEA;AACA,OAAO,MAAMQ,SAAS,GAAG;EACvB;EACAC,MAAM,EAAE,MAAAA,CAAA,KAA+B;IACrC,MAAMN,QAAQ,GAAG,MAAMvB,GAAG,CAAC8B,GAAG,CAAC,UAAU,CAAC;IAC1C,OAAOP,QAAQ,CAACQ,IAAI;EACtB,CAAC;EAED;EACAC,WAAW,EAAE,MAAAA,CAAA,KAA+B;IAC1C,MAAMT,QAAQ,GAAG,MAAMvB,GAAG,CAAC8B,GAAG,CAAC,mBAAmB,CAAC;IACnD,OAAOP,QAAQ,CAACQ,IAAI;EACtB,CAAC;EAED;EACAE,GAAG,EAAE,MAAOC,MAAsD,IAAsB;IACtF,MAAMX,QAAQ,GAAG,MAAMvB,GAAG,CAACmC,IAAI,CAAC,UAAU,EAAED,MAAM,CAAC;IACnD,OAAOX,QAAQ,CAACQ,IAAI;EACtB,CAAC;EAED;EACAK,MAAM,EAAE,MAAAA,CAAOC,EAAU,EAAEH,MAAuB,KAAsB;IACtE,MAAMX,QAAQ,GAAG,MAAMvB,GAAG,CAACsC,GAAG,CAAC,YAAYD,EAAE,EAAE,EAAEH,MAAM,CAAC;IACxD,OAAOX,QAAQ,CAACQ,IAAI;EACtB,CAAC;EAED;EACAQ,MAAM,EAAE,MAAOF,EAAU,IAAoB;IAC3C,MAAMrC,GAAG,CAACuC,MAAM,CAAC,YAAYF,EAAE,EAAE,CAAC;EACpC,CAAC;EAED;EACAG,UAAU,EAAE,MAAAA,CAAOC,GAAW,EAAEC,GAAW,EAAEC,MAAc,GAAG,IAAI,KAAwB;IACxF,MAAMpB,QAAQ,GAAG,MAAMvB,GAAG,CAAC8B,GAAG,CAAC,uBAAuBW,GAAG,QAAQC,GAAG,WAAWC,MAAM,EAAE,CAAC;IACxF,OAAOpB,QAAQ,CAACQ,IAAI;EACtB;AACF,CAAC;;AAED;AACA,OAAO,MAAMa,OAAO,GAAG;EACrB;EACAC,KAAK,EAAE,MAAAA,CAAOC,QAAgB,EAAEC,QAAgB,KAAK;IACnD,MAAMxB,QAAQ,GAAG,MAAMvB,GAAG,CAACmC,IAAI,CAAC,aAAa,EAAE;MAAEW,QAAQ;MAAEC;IAAS,CAAC,CAAC;IACtE,OAAOxB,QAAQ,CAACQ,IAAI;EACtB,CAAC;EAED;EACAiB,QAAQ,EAAE,MAAAA,CAAOF,QAAgB,EAAEC,QAAgB,KAAK;IACtD,MAAMxB,QAAQ,GAAG,MAAMvB,GAAG,CAACmC,IAAI,CAAC,gBAAgB,EAAE;MAAEW,QAAQ;MAAEC;IAAS,CAAC,CAAC;IACzE,OAAOxB,QAAQ,CAACQ,IAAI;EACtB,CAAC;EAED;EACAkB,YAAY,EAAE,MAAAA,CAAA,KAAY;IAAA,IAAAC,iBAAA,EAAAC,qBAAA;IACxB,IAAI,CAACxD,eAAe,CAACkB,aAAa,CAAC,CAAC,EAAE;MACpC,MAAM,IAAIuC,KAAK,CAAC,wBAAwB,CAAC;IAC3C;IAEA,MAAMpC,QAAQ,IAAAkC,iBAAA,GAAGjC,MAAM,CAACC,QAAQ,cAAAgC,iBAAA,wBAAAC,qBAAA,GAAfD,iBAAA,CAAiB/B,MAAM,cAAAgC,qBAAA,uBAAvBA,qBAAA,CAAyBnC,QAAQ;IAClD,IAAI,CAACA,QAAQ,EAAE;MACb,MAAM,IAAIoC,KAAK,CAAC,wBAAwB,CAAC;IAC3C;IAEA,MAAM7B,QAAQ,GAAG,MAAMvB,GAAG,CAACmC,IAAI,CAAC,gBAAgB,EAAE;MAAEnB;IAAS,CAAC,CAAC;IAC/D,OAAOO,QAAQ,CAACQ,IAAI;EACtB,CAAC;EAED;EACAsB,cAAc,EAAE,MAAAA,CAAA,KAA2B;IACzC,MAAM9B,QAAQ,GAAG,MAAMvB,GAAG,CAAC8B,GAAG,CAAC,cAAc,CAAC;IAC9C,OAAOP,QAAQ,CAACQ,IAAI;EACtB;AACF,CAAC;;AAED;AACA,OAAO,MAAMuB,QAAQ,GAAG;EACtB;EACAC,QAAQ,EAAE,MAAAA,CAAA,KAAY;IACpB,MAAMhC,QAAQ,GAAG,MAAMvB,GAAG,CAAC8B,GAAG,CAAC,cAAc,CAAC;IAC9C,OAAOP,QAAQ,CAACQ,IAAI;EACtB,CAAC;EAED;EACAyB,aAAa,EAAE,MAAAA,CAAA,KAA+B;IAC5C,MAAMjC,QAAQ,GAAG,MAAMvB,GAAG,CAAC8B,GAAG,CAAC,gBAAgB,CAAC;IAChD,OAAOP,QAAQ,CAACQ,IAAI;EACtB,CAAC;EAED;EACA0B,aAAa,EAAE,MAAOpB,EAAU,IAAsB;IACpD,MAAMd,QAAQ,GAAG,MAAMvB,GAAG,CAACsC,GAAG,CAAC,kBAAkBD,EAAE,UAAU,CAAC;IAC9D,OAAOd,QAAQ,CAACQ,IAAI;EACtB,CAAC;EAED;EACA2B,YAAY,EAAE,MAAOrB,EAAU,IAAoB;IACjD,MAAMrC,GAAG,CAACuC,MAAM,CAAC,kBAAkBF,EAAE,EAAE,CAAC;EAC1C;AACF,CAAC;AAED,eAAerC,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}