{"ast":null,"code":"import axios from'axios';const API_BASE_URL=process.env.REACT_APP_API_URL||'http://localhost:5000/api';const api=axios.create({baseURL:API_BASE_URL});// Add token to requests if available\napi.interceptors.request.use(config=>{const token=localStorage.getItem('adminToken');if(token){config.headers.Authorization=\"Bearer \".concat(token);}return config;});export const toiletAPI={// Get all approved toilets\ngetAll:()=>api.get('/toilets').then(res=>res.data),// Get toilet by ID\ngetById:id=>api.get(\"/toilets/\".concat(id)).then(res=>res.data),// Submit new toilet\nsubmit:data=>api.post('/toilets',data).then(res=>res.data)};export const authAPI={// Register admin (only first time)\nregister:(username,password)=>api.post('/auth/register',{username,password}).then(res=>res.data),// Login admin\nlogin:(username,password)=>api.post('/auth/login',{username,password}).then(res=>res.data),// Get admin profile\ngetProfile:()=>api.get('/admin/profile').then(res=>res.data)};export const adminAPI={// Get all toilets (including unapproved)\ngetAllToilets:status=>{const params=status?\"?status=\".concat(status):'';return api.get(\"/admin/toilets\".concat(params)).then(res=>res.data);},// Approve toilet\napproveToilet:id=>api.put(\"/admin/toilets/\".concat(id,\"/approve\")).then(res=>res.data),// Delete toilet\ndeleteToilet:id=>api.delete(\"/admin/toilets/\".concat(id)).then(res=>res.data),// Update toilet\nupdateToilet:(id,data)=>api.put(\"/admin/toilets/\".concat(id),data).then(res=>res.data)};","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","concat","toiletAPI","getAll","get","then","res","data","getById","id","submit","post","authAPI","register","username","password","login","getProfile","adminAPI","getAllToilets","status","params","approveToilet","put","deleteToilet","delete","updateToilet"],"sources":["d:/map for cur/toilet-finder-kaliningrad/frontend/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\nimport { Toilet, ToiletFormData, Admin } from '../types';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n});\n\n// Add token to requests if available\napi.interceptors.request.use((config) => {\n  const token = localStorage.getItem('adminToken');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\nexport const toiletAPI = {\n  // Get all approved toilets\n  getAll: (): Promise<Toilet[]> => \n    api.get('/toilets').then(res => res.data),\n\n  // Get toilet by ID\n  getById: (id: number): Promise<Toilet> => \n    api.get(`/toilets/${id}`).then(res => res.data),\n\n  // Submit new toilet\n  submit: (data: ToiletFormData): Promise<{ message: string; id: number }> => \n    api.post('/toilets', data).then(res => res.data),\n};\n\nexport const authAPI = {\n  // Register admin (only first time)\n  register: (username: string, password: string): Promise<{ message: string; token: string; admin: Admin }> => \n    api.post('/auth/register', { username, password }).then(res => res.data),\n\n  // Login admin\n  login: (username: string, password: string): Promise<{ message: string; token: string; admin: Admin }> => \n    api.post('/auth/login', { username, password }).then(res => res.data),\n\n  // Get admin profile\n  getProfile: (): Promise<{ user: Admin }> => \n    api.get('/admin/profile').then(res => res.data),\n};\n\nexport const adminAPI = {\n  // Get all toilets (including unapproved)\n  getAllToilets: (status?: 'pending' | 'approved'): Promise<Toilet[]> => {\n    const params = status ? `?status=${status}` : '';\n    return api.get(`/admin/toilets${params}`).then(res => res.data);\n  },\n\n  // Approve toilet\n  approveToilet: (id: number): Promise<{ message: string }> => \n    api.put(`/admin/toilets/${id}/approve`).then(res => res.data),\n\n  // Delete toilet\n  deleteToilet: (id: number): Promise<{ message: string }> => \n    api.delete(`/admin/toilets/${id}`).then(res => res.data),\n\n  // Update toilet\n  updateToilet: (id: number, data: ToiletFormData): Promise<{ message: string }> => \n    api.put(`/admin/toilets/${id}`, data).then(res => res.data),\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}