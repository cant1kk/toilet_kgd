{"ast":null,"code":"// Геокодинг через OpenStreetMap Nominatim API (бесплатный)\nconst NOMINATIM_API='https://nominatim.openstreetmap.org/search';export const geocodeAddress=async address=>{try{// Добавляем \"Калининград\" для точности поиска\nconst searchQuery=\"\".concat(address,\", \\u041A\\u0430\\u043B\\u0438\\u043D\\u0438\\u043D\\u0433\\u0440\\u0430\\u0434, \\u0420\\u043E\\u0441\\u0441\\u0438\\u044F\");const response=await fetch(\"\".concat(NOMINATIM_API,\"?format=json&q=\").concat(encodeURIComponent(searchQuery),\"&limit=1&countrycodes=ru\"),{headers:{'User-Agent':'ToiletFinder Kaliningrad App'}});if(!response.ok){throw new Error('Geocoding request failed');}const data=await response.json();if(data.length===0){return null;}return data[0];}catch(error){console.error('Geocoding error:',error);return null;}};// Валидация формата адреса\nexport const validateAddress=address=>{// Базовая проверка - должен содержать улицу и номер дома\nconst streetPatterns=[/^[а-яА-ЯёЁ\\s]+\\s+\\d+/i,// ул. Ленина 15\n/^[а-яА-ЯёЁ\\s]+\\s+[а-яА-ЯёЁ]+\\s+\\d+/i,// Ленинский проспект 30\n/^[а-яА-ЯёЁ\\s]+\\s+д\\.?\\s*\\d+/i// ул. Ленина д.15\n];return streetPatterns.some(pattern=>pattern.test(address.trim()));};// Форматирование адреса для отображения\nexport const formatAddress=address=>{return address.trim().replace(/\\s+/g,' ');};","map":{"version":3,"names":["NOMINATIM_API","geocodeAddress","address","searchQuery","concat","response","fetch","encodeURIComponent","headers","ok","Error","data","json","length","error","console","validateAddress","streetPatterns","some","pattern","test","trim","formatAddress","replace"],"sources":["d:/map for cur/toilet-finder-kaliningrad/frontend/src/services/geocoding.ts"],"sourcesContent":["// Геокодинг через OpenStreetMap Nominatim API (бесплатный)\nconst NOMINATIM_API = 'https://nominatim.openstreetmap.org/search';\n\nexport interface GeocodingResult {\n  display_name: string;\n  lat: string;\n  lon: string;\n  address: {\n    road?: string;\n    house_number?: string;\n    city?: string;\n    county?: string;\n    state?: string;\n  };\n}\n\nexport const geocodeAddress = async (address: string): Promise<GeocodingResult | null> => {\n  try {\n    // Добавляем \"Калининград\" для точности поиска\n    const searchQuery = `${address}, Калининград, Россия`;\n    \n    const response = await fetch(\n      `${NOMINATIM_API}?format=json&q=${encodeURIComponent(searchQuery)}&limit=1&countrycodes=ru`,\n      {\n        headers: {\n          'User-Agent': 'ToiletFinder Kaliningrad App'\n        }\n      }\n    );\n\n    if (!response.ok) {\n      throw new Error('Geocoding request failed');\n    }\n\n    const data = await response.json();\n    \n    if (data.length === 0) {\n      return null;\n    }\n\n    return data[0] as GeocodingResult;\n  } catch (error) {\n    console.error('Geocoding error:', error);\n    return null;\n  }\n};\n\n// Валидация формата адреса\nexport const validateAddress = (address: string): boolean => {\n  // Базовая проверка - должен содержать улицу и номер дома\n  const streetPatterns = [\n    /^[а-яА-ЯёЁ\\s]+\\s+\\d+/i,  // ул. Ленина 15\n    /^[а-яА-ЯёЁ\\s]+\\s+[а-яА-ЯёЁ]+\\s+\\d+/i,  // Ленинский проспект 30\n    /^[а-яА-ЯёЁ\\s]+\\s+д\\.?\\s*\\d+/i,  // ул. Ленина д.15\n  ];\n\n  return streetPatterns.some(pattern => pattern.test(address.trim()));\n};\n\n// Форматирование адреса для отображения\nexport const formatAddress = (address: string): string => {\n  return address.trim().replace(/\\s+/g, ' ');\n};"],"mappings":"AAAA;AACA,KAAM,CAAAA,aAAa,CAAG,4CAA4C,CAelE,MAAO,MAAM,CAAAC,cAAc,CAAG,KAAO,CAAAC,OAAe,EAAsC,CACxF,GAAI,CACF;AACA,KAAM,CAAAC,WAAW,IAAAC,MAAA,CAAMF,OAAO,8GAAuB,CAErD,KAAM,CAAAG,QAAQ,CAAG,KAAM,CAAAC,KAAK,IAAAF,MAAA,CACvBJ,aAAa,oBAAAI,MAAA,CAAkBG,kBAAkB,CAACJ,WAAW,CAAC,6BACjE,CACEK,OAAO,CAAE,CACP,YAAY,CAAE,8BAChB,CACF,CACF,CAAC,CAED,GAAI,CAACH,QAAQ,CAACI,EAAE,CAAE,CAChB,KAAM,IAAI,CAAAC,KAAK,CAAC,0BAA0B,CAAC,CAC7C,CAEA,KAAM,CAAAC,IAAI,CAAG,KAAM,CAAAN,QAAQ,CAACO,IAAI,CAAC,CAAC,CAElC,GAAID,IAAI,CAACE,MAAM,GAAK,CAAC,CAAE,CACrB,MAAO,KAAI,CACb,CAEA,MAAO,CAAAF,IAAI,CAAC,CAAC,CAAC,CAChB,CAAE,MAAOG,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,kBAAkB,CAAEA,KAAK,CAAC,CACxC,MAAO,KAAI,CACb,CACF,CAAC,CAED;AACA,MAAO,MAAM,CAAAE,eAAe,CAAId,OAAe,EAAc,CAC3D;AACA,KAAM,CAAAe,cAAc,CAAG,CACrB,uBAAuB,CAAG;AAC1B,qCAAqC,CAAG;AACxC,8BAAiC;AAAA,CAClC,CAED,MAAO,CAAAA,cAAc,CAACC,IAAI,CAACC,OAAO,EAAIA,OAAO,CAACC,IAAI,CAAClB,OAAO,CAACmB,IAAI,CAAC,CAAC,CAAC,CAAC,CACrE,CAAC,CAED;AACA,MAAO,MAAM,CAAAC,aAAa,CAAIpB,OAAe,EAAa,CACxD,MAAO,CAAAA,OAAO,CAACmB,IAAI,CAAC,CAAC,CAACE,OAAO,CAAC,MAAM,CAAE,GAAG,CAAC,CAC5C,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}