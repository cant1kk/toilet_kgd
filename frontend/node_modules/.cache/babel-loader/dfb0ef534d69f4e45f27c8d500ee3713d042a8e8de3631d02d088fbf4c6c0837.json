{"ast":null,"code":"// Геокодинг через OpenStreetMap Nominatim API (бесплатный)\nconst NOMINATIM_API = 'https://nominatim.openstreetmap.org/search';\n// Cache для геокодинга\nconst geocodeCache = new Map();\n\n// Simple debounce implementation\nconst debounce = (func, delay) => {\n  let timeoutId;\n  let lastResolve = null;\n  return (...args) => {\n    return new Promise(resolve => {\n      if (timeoutId) {\n        clearTimeout(timeoutId);\n      }\n      lastResolve = resolve;\n      timeoutId = setTimeout(async () => {\n        try {\n          const result = await func(...args);\n          if (lastResolve) {\n            lastResolve(result);\n          }\n        } catch (error) {\n          if (lastResolve) {\n            lastResolve(error);\n          }\n        }\n      }, delay);\n    });\n  };\n};\nconst geocodeAddressInternal = async address => {\n  try {\n    // Проверяем кэш\n    if (geocodeCache.has(address)) {\n      return geocodeCache.get(address);\n    }\n\n    // Добавляем \"Калининград\" для точности поиска\n    const searchQuery = `${address}, Калининград, Россия`;\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), 5000); // 5 секунд таймаут\n\n    const response = await fetch(`${NOMINATIM_API}?format=json&q=${encodeURIComponent(searchQuery)}&limit=1&countrycodes=ru`, {\n      headers: {\n        'User-Agent': 'ToiletFinder Kaliningrad App'\n      },\n      signal: controller.signal\n    });\n    clearTimeout(timeoutId);\n    if (!response.ok) {\n      throw new Error('Geocoding request failed');\n    }\n    const data = await response.json();\n    if (data.length === 0) {\n      return null;\n    }\n    const result = data[0];\n    // Сохраняем в кэш\n    geocodeCache.set(address, result);\n    return result;\n  } catch (error) {\n    console.error('Geocoding error:', error);\n    return null;\n  }\n};\n\n// Экспортируем debounced версию\nexport const geocodeAddress = debounce(geocodeAddressInternal, 500);\n\n// Валидация формата адреса\nexport const validateAddress = address => {\n  // Базовая проверка - должен содержать улицу и номер дома\n  const streetPatterns = [/^[а-яА-ЯёЁ\\s]+\\s+\\d+/i,\n  // ул. Ленина 15\n  /^[а-яА-ЯёЁ\\s]+\\s+[а-яА-ЯёЁ]+\\s+\\d+/i,\n  // Ленинский проспект 30\n  /^[а-яА-ЯёЁ\\s]+\\s+д\\.?\\s*\\d+/i // ул. Ленина д.15\n  ];\n  return streetPatterns.some(pattern => pattern.test(address.trim()));\n};\n\n// Форматирование адреса для отображения\nexport const formatAddress = address => {\n  return address.trim().replace(/\\s+/g, ' ');\n};","map":{"version":3,"names":["NOMINATIM_API","geocodeCache","Map","debounce","func","delay","timeoutId","lastResolve","args","Promise","resolve","clearTimeout","setTimeout","result","error","geocodeAddressInternal","address","has","get","searchQuery","controller","AbortController","abort","response","fetch","encodeURIComponent","headers","signal","ok","Error","data","json","length","set","console","geocodeAddress","validateAddress","streetPatterns","some","pattern","test","trim","formatAddress","replace"],"sources":["d:/map for cur/toilet-finder-kaliningrad/frontend/src/services/geocoding.ts"],"sourcesContent":["// Геокодинг через OpenStreetMap Nominatim API (бесплатный)\nconst NOMINATIM_API = 'https://nominatim.openstreetmap.org/search';\n\nexport interface GeocodingResult {\n  display_name: string;\n  lat: string;\n  lon: string;\n  address: {\n    road?: string;\n    house_number?: string;\n    city?: string;\n    county?: string;\n    state?: string;\n  };\n}\n\n// Cache для геокодинга\nconst geocodeCache = new Map<string, GeocodingResult>();\n\n// Simple debounce implementation\nconst debounce = <T extends (...args: any[]) => any>(func: T, delay: number): ((...args: Parameters<T>) => Promise<ReturnType<T>>) => {\n  let timeoutId: NodeJS.Timeout;\n  let lastResolve: ((value: ReturnType<T>) => void) | null = null;\n  \n  return (...args: Parameters<T>): Promise<ReturnType<T>> => {\n    return new Promise((resolve) => {\n      if (timeoutId) {\n        clearTimeout(timeoutId);\n      }\n      \n      lastResolve = resolve as any;\n      \n      timeoutId = setTimeout(async () => {\n        try {\n          const result = await func(...args);\n          if (lastResolve) {\n            lastResolve(result);\n          }\n        } catch (error) {\n          if (lastResolve) {\n            lastResolve(error as any);\n          }\n        }\n      }, delay);\n    });\n  };\n};\n\nconst geocodeAddressInternal = async (address: string): Promise<GeocodingResult | null> => {\n  try {\n    // Проверяем кэш\n    if (geocodeCache.has(address)) {\n      return geocodeCache.get(address)!;\n    }\n\n    // Добавляем \"Калининград\" для точности поиска\n    const searchQuery = `${address}, Калининград, Россия`;\n    \n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), 5000); // 5 секунд таймаут\n    \n    const response = await fetch(\n      `${NOMINATIM_API}?format=json&q=${encodeURIComponent(searchQuery)}&limit=1&countrycodes=ru`,\n      {\n        headers: {\n          'User-Agent': 'ToiletFinder Kaliningrad App'\n        },\n        signal: controller.signal\n      }\n    );\n\n    clearTimeout(timeoutId);\n\n    if (!response.ok) {\n      throw new Error('Geocoding request failed');\n    }\n\n    const data = await response.json();\n    \n    if (data.length === 0) {\n      return null;\n    }\n\n    const result = data[0] as GeocodingResult;\n    // Сохраняем в кэш\n    geocodeCache.set(address, result);\n    return result;\n  } catch (error) {\n    console.error('Geocoding error:', error);\n    return null;\n  }\n};\n\n// Экспортируем debounced версию\nexport const geocodeAddress = debounce(geocodeAddressInternal, 500);\n\n// Валидация формата адреса\nexport const validateAddress = (address: string): boolean => {\n  // Базовая проверка - должен содержать улицу и номер дома\n  const streetPatterns = [\n    /^[а-яА-ЯёЁ\\s]+\\s+\\d+/i,  // ул. Ленина 15\n    /^[а-яА-ЯёЁ\\s]+\\s+[а-яА-ЯёЁ]+\\s+\\d+/i,  // Ленинский проспект 30\n    /^[а-яА-ЯёЁ\\s]+\\s+д\\.?\\s*\\d+/i,  // ул. Ленина д.15\n  ];\n\n  return streetPatterns.some(pattern => pattern.test(address.trim()));\n};\n\n// Форматирование адреса для отображения\nexport const formatAddress = (address: string): string => {\n  return address.trim().replace(/\\s+/g, ' ');\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}