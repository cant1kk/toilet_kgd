{"ast":null,"code":"import axios from'axios';const API_BASE_URL=process.env.REACT_APP_API_URL||'http://localhost:5000/api';const api=axios.create({baseURL:API_BASE_URL,timeout:10000// 10 second timeout\n});// Add token to requests if available\napi.interceptors.request.use(config=>{const token=localStorage.getItem('adminToken');if(token){config.headers.Authorization=\"Bearer \".concat(token);}return config;});// Response caching\nconst cache=new Map();const CACHE_DURATION=5*60*1000;// 5 minutes\napi.interceptors.response.use(response=>{var _response$config$meth;if(((_response$config$meth=response.config.method)===null||_response$config$meth===void 0?void 0:_response$config$meth.toLowerCase())==='get'){const key=response.config.url||'';cache.set(key,{data:response.data,timestamp:Date.now()});}return response;});// Request interceptor for cache\napi.interceptors.request.use(config=>{var _config$method;if(((_config$method=config.method)===null||_config$method===void 0?void 0:_config$method.toLowerCase())==='get'){const key=config.url||'';const cached=cache.get(key);if(cached&&Date.now()-cached.timestamp<CACHE_DURATION){// Return cached data\nreturn Promise.reject({__cached:true,data:cached.data});}}return config;});// Handle cached responses\napi.interceptors.response.use(response=>response,error=>{if(error.__cached){return Promise.resolve({data:error.data});}return Promise.reject(error);});export const toiletAPI={// Get all approved toilets\ngetAll:()=>api.get('/toilets').then(res=>res.data),// Get toilet by ID\ngetById:id=>api.get(\"/toilets/\".concat(id)).then(res=>res.data),// Submit new toilet\nsubmit:data=>api.post('/toilets',data).then(res=>res.data)};export const authAPI={// Register admin (only first time)\nregister:(username,password)=>api.post('/auth/register',{username,password}).then(res=>res.data),// Login admin\nlogin:(username,password)=>api.post('/auth/login',{username,password}).then(res=>res.data),// Get admin profile\ngetProfile:()=>api.get('/admin/profile').then(res=>res.data)};export const adminAPI={// Get all toilets (including unapproved)\ngetAllToilets:status=>{const params=status?\"?status=\".concat(status):'';return api.get(\"/admin/toilets\".concat(params)).then(res=>res.data);},// Approve toilet\napproveToilet:id=>api.put(\"/admin/toilets/\".concat(id,\"/approve\")).then(res=>res.data),// Delete toilet\ndeleteToilet:id=>api.delete(\"/admin/toilets/\".concat(id)).then(res=>res.data),// Update toilet\nupdateToilet:(id,data)=>api.put(\"/admin/toilets/\".concat(id),data).then(res=>res.data)};","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","timeout","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","concat","cache","Map","CACHE_DURATION","response","_response$config$meth","method","toLowerCase","key","url","set","data","timestamp","Date","now","_config$method","cached","get","Promise","reject","__cached","error","resolve","toiletAPI","getAll","then","res","getById","id","submit","post","authAPI","register","username","password","login","getProfile","adminAPI","getAllToilets","status","params","approveToilet","put","deleteToilet","delete","updateToilet"],"sources":["d:/map for cur/toilet-finder-kaliningrad/frontend/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\nimport { Toilet, ToiletFormData, Admin } from '../types';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 10000, // 10 second timeout\n});\n\n// Add token to requests if available\napi.interceptors.request.use((config) => {\n  const token = localStorage.getItem('adminToken');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Response caching\nconst cache = new Map<string, { data: any; timestamp: number }>();\nconst CACHE_DURATION = 5 * 60 * 1000; // 5 minutes\n\napi.interceptors.response.use((response) => {\n  if (response.config.method?.toLowerCase() === 'get') {\n    const key = response.config.url || '';\n    cache.set(key, {\n      data: response.data,\n      timestamp: Date.now()\n    });\n  }\n  return response;\n});\n\n// Request interceptor for cache\napi.interceptors.request.use((config) => {\n  if (config.method?.toLowerCase() === 'get') {\n    const key = config.url || '';\n    const cached = cache.get(key);\n    if (cached && Date.now() - cached.timestamp < CACHE_DURATION) {\n      // Return cached data\n      return Promise.reject({ __cached: true, data: cached.data });\n    }\n  }\n  return config;\n});\n\n// Handle cached responses\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.__cached) {\n      return Promise.resolve({ data: error.data });\n    }\n    return Promise.reject(error);\n  }\n);\n\nexport const toiletAPI = {\n  // Get all approved toilets\n  getAll: (): Promise<Toilet[]> => \n    api.get('/toilets').then(res => res.data),\n\n  // Get toilet by ID\n  getById: (id: number): Promise<Toilet> => \n    api.get(`/toilets/${id}`).then(res => res.data),\n\n  // Submit new toilet\n  submit: (data: ToiletFormData): Promise<{ message: string; id: number }> => \n    api.post('/toilets', data).then(res => res.data),\n};\n\nexport const authAPI = {\n  // Register admin (only first time)\n  register: (username: string, password: string): Promise<{ message: string; token: string; admin: Admin }> => \n    api.post('/auth/register', { username, password }).then(res => res.data),\n\n  // Login admin\n  login: (username: string, password: string): Promise<{ message: string; token: string; admin: Admin }> => \n    api.post('/auth/login', { username, password }).then(res => res.data),\n\n  // Get admin profile\n  getProfile: (): Promise<{ user: Admin }> => \n    api.get('/admin/profile').then(res => res.data),\n};\n\nexport const adminAPI = {\n  // Get all toilets (including unapproved)\n  getAllToilets: (status?: 'pending' | 'approved'): Promise<Toilet[]> => {\n    const params = status ? `?status=${status}` : '';\n    return api.get(`/admin/toilets${params}`).then(res => res.data);\n  },\n\n  // Approve toilet\n  approveToilet: (id: number): Promise<{ message: string }> => \n    api.put(`/admin/toilets/${id}/approve`).then(res => res.data),\n\n  // Delete toilet\n  deleteToilet: (id: number): Promise<{ message: string }> => \n    api.delete(`/admin/toilets/${id}`).then(res => res.data),\n\n  // Update toilet\n  updateToilet: (id: number, data: ToiletFormData): Promise<{ message: string }> => \n    api.put(`/admin/toilets/${id}`, data).then(res => res.data),\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}