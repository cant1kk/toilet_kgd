{"ast":null,"code":"import _objectWithoutProperties from \"d:/map for cur/toilet-finder-kaliningrad/frontend/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nconst _excluded = [\"attributes\", \"bounds\"],\n  _excluded2 = [\"children\"];\nimport { createElementHook, createElementObject, createLayerHook, updateMediaOverlay } from '@react-leaflet/core';\nimport { SVGOverlay as LeafletSVGOverlay } from 'leaflet';\nimport { forwardRef, useImperativeHandle } from 'react';\nimport { createPortal } from 'react-dom';\nexport const useSVGOverlayElement = createElementHook(function createSVGOverlay(props, context) {\n  const {\n      attributes,\n      bounds\n    } = props,\n    options = _objectWithoutProperties(props, _excluded);\n  const container = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n  container.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\n  if (attributes != null) {\n    for (const name of Object.keys(attributes)) {\n      container.setAttribute(name, attributes[name]);\n    }\n  }\n  const overlay = new LeafletSVGOverlay(container, bounds, options);\n  return createElementObject(overlay, context, container);\n}, updateMediaOverlay);\nexport const useSVGOverlay = createLayerHook(useSVGOverlayElement);\nfunction SVGOverlayComponent(_ref, forwardedRef) {\n  let {\n      children\n    } = _ref,\n    options = _objectWithoutProperties(_ref, _excluded2);\n  const {\n    instance,\n    container\n  } = useSVGOverlay(options).current;\n  useImperativeHandle(forwardedRef, () => instance);\n  return container == null || children == null ? null : /*#__PURE__*/createPortal(children, container);\n}\nexport const SVGOverlay = /*#__PURE__*/forwardRef(SVGOverlayComponent);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}