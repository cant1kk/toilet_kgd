{"ast":null,"code":"import WebApp from '@twa-dev/sdk';\nclass TelegramService {\n  constructor() {\n    this.isInitialized = false;\n    this.user = null;\n    this.mainButtonCallback = null;\n    this.backButtonCallback = null;\n  }\n  init() {\n    if (typeof window !== 'undefined' && !this.isInitialized) {\n      try {\n        var _window$Telegram;\n        // Проверяем, что мы в Telegram WebApp\n        if (!((_window$Telegram = window.Telegram) !== null && _window$Telegram !== void 0 && _window$Telegram.WebApp)) {\n          console.warn('Not in Telegram WebApp environment');\n          return;\n        }\n        WebApp.ready();\n        WebApp.expand();\n        WebApp.enableClosingConfirmation();\n\n        // Включаем подтверждение закрытия\n        if (WebApp.enableClosingConfirmation) {\n          WebApp.enableClosingConfirmation();\n        }\n\n        // Устанавливаем тему\n        if (WebApp.colorScheme) {\n          document.documentElement.setAttribute('data-theme', WebApp.colorScheme);\n        }\n\n        // Применяем цветовую схему Telegram\n        this.applyTelegramTheme();\n\n        // Получаем данные пользователя\n        if (WebApp.initDataUnsafe.user) {\n          this.user = WebApp.initDataUnsafe.user;\n        }\n\n        // Настройка кнопки \"Назад\"\n        WebApp.BackButton.onClick(() => {\n          if (this.backButtonCallback) {\n            this.backButtonCallback();\n          } else {\n            window.history.back();\n          }\n        });\n        if (WebApp.BackButton && WebApp.BackButton.onClick) {\n          WebApp.BackButton.onClick(() => {\n            if (this.backButtonCallback) {\n              this.backButtonCallback();\n            } else {\n              window.history.back();\n            }\n          });\n        }\n\n        // Настройка главной кнопки\n        WebApp.MainButton.setParams({\n          text: 'Закрыть',\n          color: WebApp.themeParams.button_color || '#007bff'\n        });\n        WebApp.MainButton.onClick(() => {\n          if (this.mainButtonCallback) {\n            this.mainButtonCallback();\n          } else {\n            WebApp.close();\n          }\n        });\n        if (WebApp.MainButton && WebApp.MainButton.setParams) {\n          var _WebApp$themeParams;\n          WebApp.MainButton.setParams({\n            text: 'Закрыть',\n            color: ((_WebApp$themeParams = WebApp.themeParams) === null || _WebApp$themeParams === void 0 ? void 0 : _WebApp$themeParams.button_color) || '#007bff'\n          });\n        }\n        if (WebApp.MainButton && WebApp.MainButton.onClick) {\n          WebApp.MainButton.onClick(() => {\n            if (this.mainButtonCallback) {\n              this.mainButtonCallback();\n            } else {\n              if (WebApp.close) WebApp.close();\n            }\n          });\n        }\n\n        // Адаптируем viewport для Telegram\n        this.adaptViewport();\n        this.isInitialized = true;\n        console.log('Telegram WebApp initialized successfully');\n      } catch (error) {\n        console.error('Failed to initialize Telegram WebApp:', error);\n      }\n    }\n  }\n  applyTelegramTheme() {\n    if (!this.isInitialized || !WebApp.themeParams) return;\n    const themeParams = WebApp.themeParams;\n    const root = document.documentElement;\n\n    // Применяем цвета из Telegram\n    if (themeParams.bg_color) {\n      root.style.setProperty('--tg-bg-color', themeParams.bg_color);\n      document.body.style.backgroundColor = themeParams.bg_color;\n    }\n    if (themeParams.text_color) {\n      root.style.setProperty('--tg-text-color', themeParams.text_color);\n      document.body.style.color = themeParams.text_color;\n    }\n    if (themeParams.hint_color) {\n      root.style.setProperty('--tg-hint-color', themeParams.hint_color);\n    }\n    if (themeParams.button_color) {\n      root.style.setProperty('--tg-button-color', themeParams.button_color);\n    }\n    if (themeParams.button_text_color) {\n      root.style.setProperty('--tg-button-text-color', themeParams.button_text_color);\n    }\n\n    // Устанавливаем data-theme атрибут для CSS\n    const colorScheme = WebApp.colorScheme || 'light';\n    root.setAttribute('data-theme', colorScheme);\n    if (colorScheme === 'dark') {\n      root.classList.add('dark-theme');\n    } else {\n      root.classList.remove('dark-theme');\n    }\n  }\n  adaptViewport() {\n    if (!this.isInitialized) return;\n\n    // Адаптация для мобильных устройств в Telegram\n    document.body.style.margin = '0';\n    document.body.style.padding = '0';\n    document.body.style.height = '100vh';\n    document.body.style.overflow = 'hidden';\n    document.body.style.position = 'fixed';\n    document.body.style.top = '0';\n    document.body.style.left = '0';\n    document.body.style.right = '0';\n    document.body.style.bottom = '0';\n\n    // Обрабатываем изменение viewport\n    WebApp.onEvent('viewportChanged', () => {\n      const height = WebApp.viewportHeight;\n      document.documentElement.style.setProperty('--tg-viewport-height', `${height}px`);\n    });\n  }\n  getUser() {\n    return this.user;\n  }\n  isTelegramApp() {\n    var _window$Telegram2;\n    return typeof window !== 'undefined' && ((_window$Telegram2 = window.Telegram) === null || _window$Telegram2 === void 0 ? void 0 : _window$Telegram2.WebApp) !== undefined;\n  }\n\n  // Управление главной кнопкой\n  showMainButton() {\n    if (this.isInitialized && WebApp.MainButton && WebApp.MainButton.show) {\n      WebApp.MainButton.show();\n    }\n  }\n  hideMainButton() {\n    if (this.isInitialized && WebApp.MainButton && WebApp.MainButton.hide) {\n      WebApp.MainButton.hide();\n    }\n  }\n  setMainButtonParams(params) {\n    if (this.isInitialized && WebApp.MainButton && WebApp.MainButton.setParams) {\n      WebApp.MainButton.setParams(params);\n    }\n  }\n  setMainButtonCallback(callback) {\n    this.mainButtonCallback = callback;\n  }\n  clearMainButtonCallback() {\n    this.mainButtonCallback = null;\n  }\n\n  // Управление кнопккой \"Назад\"\n  showBackButton() {\n    if (this.isInitialized && WebApp.BackButton && WebApp.BackButton.show) {\n      WebApp.BackButton.show();\n    }\n  }\n  hideBackButton() {\n    if (this.isInitialized && WebApp.BackButton && WebApp.BackButton.hide) {\n      WebApp.BackButton.hide();\n    }\n  }\n  setBackButtonCallback(callback) {\n    this.backButtonCallback = callback;\n  }\n  clearBackButtonCallback() {\n    this.backButtonCallback = null;\n  }\n\n  // Всплывающие окна\n  showAlert(message) {\n    if (this.isInitialized && this.isTelegramApp() && WebApp.showAlert) {\n      try {\n        WebApp.showAlert(message);\n      } catch (error) {\n        console.warn('WebApp.showAlert not supported, fallback to alert:', error);\n        alert(message);\n      }\n    } else {\n      alert(message);\n    }\n  }\n  showConfirm(message, callback) {\n    if (this.isInitialized && this.isTelegramApp() && WebApp.showConfirm) {\n      try {\n        WebApp.showConfirm(message, callback);\n      } catch (error) {\n        console.warn('WebApp.showConfirm not supported, fallback to confirm:', error);\n        const confirmed = window.confirm(message);\n        if (callback) callback(confirmed);\n      }\n    } else {\n      const confirmed = window.confirm(message);\n      if (callback) callback(confirmed);\n    }\n  }\n\n  // Открытие ссылок\n  openLink(url) {\n    if (this.isInitialized && WebApp.openLink) {\n      WebApp.openLink(url);\n    } else {\n      window.open(url, '_blank');\n    }\n  }\n  openTelegramLink(url) {\n    if (this.isInitialized && WebApp.openTelegramLink) {\n      WebApp.openTelegramLink(url);\n    } else {\n      window.open(url, '_blank');\n    }\n  }\n\n  // Управление приложением\n  close() {\n    if (this.isInitialized && WebApp.close) {\n      WebApp.close();\n    }\n  }\n  ready() {\n    if (this.isInitialized && WebApp.ready) {\n      WebApp.ready();\n    }\n  }\n  expand() {\n    if (this.isInitialized && WebApp.expand) {\n      WebApp.expand();\n    }\n  }\n\n  // Тема и оформление\n  getThemeParams() {\n    if (this.isInitialized) {\n      return WebApp.themeParams;\n    }\n    return {};\n  }\n  getColorScheme() {\n    if (this.isInitialized) {\n      return WebApp.colorScheme;\n    }\n    return 'light';\n  }\n  getViewportHeight() {\n    if (this.isInitialized) {\n      return WebApp.viewportHeight;\n    }\n    return window.innerHeight;\n  }\n\n  // Данные и события\n  sendData(data) {\n    if (this.isInitialized) {\n      WebApp.sendData(data);\n    }\n  }\n  openInvoice(url, callback) {\n    if (this.isInitialized && WebApp.openInvoice) {\n      WebApp.openInvoice(url, callback);\n    }\n  }\n  setHeaderColor(color) {\n    if (this.isInitialized && WebApp.setHeaderColor) {\n      WebApp.setHeaderColor(color);\n    }\n  }\n  setBackgroundColor(color) {\n    if (this.isInitialized && WebApp.setBackgroundColor) {\n      WebApp.setBackgroundColor(color);\n    }\n  }\n\n  // Haptic feedback\n  impactOccurred(style = 'medium') {\n    if (this.isInitialized && this.isTelegramApp() && WebApp.HapticFeedback) {\n      WebApp.HapticFeedback.impactOccurred(style);\n    }\n  }\n  notificationOccurred(type) {\n    if (this.isInitialized && this.isTelegramApp() && WebApp.HapticFeedback) {\n      WebApp.HapticFeedback.notificationOccurred(type);\n    }\n  }\n  selectionChanged() {\n    if (this.isInitialized && this.isTelegramApp() && WebApp.HapticFeedback) {\n      WebApp.HapticFeedback.selectionChanged();\n    }\n  }\n\n  // Получение initData для отправки на сервер\n  getInitData() {\n    if (this.isInitialized) {\n      return WebApp.initData;\n    }\n    return null;\n  }\n}\nexport const telegramService = new TelegramService();","map":{"version":3,"names":["WebApp","TelegramService","constructor","isInitialized","user","mainButtonCallback","backButtonCallback","init","window","_window$Telegram","Telegram","console","warn","ready","expand","enableClosingConfirmation","colorScheme","document","documentElement","setAttribute","applyTelegramTheme","initDataUnsafe","BackButton","onClick","history","back","MainButton","setParams","text","color","themeParams","button_color","close","_WebApp$themeParams","adaptViewport","log","error","root","bg_color","style","setProperty","body","backgroundColor","text_color","hint_color","button_text_color","classList","add","remove","margin","padding","height","overflow","position","top","left","right","bottom","onEvent","viewportHeight","getUser","isTelegramApp","_window$Telegram2","undefined","showMainButton","show","hideMainButton","hide","setMainButtonParams","params","setMainButtonCallback","callback","clearMainButtonCallback","showBackButton","hideBackButton","setBackButtonCallback","clearBackButtonCallback","showAlert","message","alert","showConfirm","confirmed","confirm","openLink","url","open","openTelegramLink","getThemeParams","getColorScheme","getViewportHeight","innerHeight","sendData","data","openInvoice","setHeaderColor","setBackgroundColor","impactOccurred","HapticFeedback","notificationOccurred","type","selectionChanged","getInitData","initData","telegramService"],"sources":["D:/map for cur/toilet-finder-kaliningrad/frontend/src/services/telegram.ts"],"sourcesContent":["import WebApp from '@twa-dev/sdk';\n\nexport interface TelegramUser {\n  id: number;\n  first_name: string;\n  last_name?: string;\n  username?: string;\n  language_code?: string;\n  photo_url?: string;\n}\n\nexport interface TelegramInitData {\n  query_id?: string;\n  user?: TelegramUser;\n  auth_date: number;\n  hash: string;\n}\n\nclass TelegramService {\n  private isInitialized = false;\n  private user: TelegramUser | null = null;\n  private mainButtonCallback: (() => void) | null = null;\n  private backButtonCallback: (() => void) | null = null;\n\n  init() {\n    if (typeof window !== 'undefined' && !this.isInitialized) {\n      try {\n        // Проверяем, что мы в Telegram WebApp\n        if (!window.Telegram?.WebApp) {\n          console.warn('Not in Telegram WebApp environment');\n          return;\n        }\n\n        WebApp.ready();\n        WebApp.expand();\n        WebApp.enableClosingConfirmation();\n        \n        // Включаем подтверждение закрытия\n        if (WebApp.enableClosingConfirmation) {\n          WebApp.enableClosingConfirmation();\n        }\n        \n        // Устанавливаем тему\n        if (WebApp.colorScheme) {\n          document.documentElement.setAttribute('data-theme', WebApp.colorScheme);\n        }\n\n        // Применяем цветовую схему Telegram\n        this.applyTelegramTheme();\n\n        // Получаем данные пользователя\n        if (WebApp.initDataUnsafe.user) {\n          this.user = WebApp.initDataUnsafe.user;\n        }\n\n        // Настройка кнопки \"Назад\"\n        WebApp.BackButton.onClick(() => {\n          if (this.backButtonCallback) {\n            this.backButtonCallback();\n          } else {\n            window.history.back();\n          }\n        });\n\n        if (WebApp.BackButton && WebApp.BackButton.onClick) {\n          WebApp.BackButton.onClick(() => {\n            if (this.backButtonCallback) {\n              this.backButtonCallback();\n            } else {\n              window.history.back();\n            }\n          });\n        }\n\n        // Настройка главной кнопки\n        WebApp.MainButton.setParams({\n          text: 'Закрыть',\n          color: WebApp.themeParams.button_color || '#007bff'\n        });\n        \n        WebApp.MainButton.onClick(() => {\n          if (this.mainButtonCallback) {\n            this.mainButtonCallback();\n          } else {\n            WebApp.close();\n          }\n        });\n\n        if (WebApp.MainButton && WebApp.MainButton.setParams) {\n          WebApp.MainButton.setParams({\n            text: 'Закрыть',\n            color: WebApp.themeParams?.button_color || '#007bff'\n          });\n        }\n        \n        if (WebApp.MainButton && WebApp.MainButton.onClick) {\n          WebApp.MainButton.onClick(() => {\n            if (this.mainButtonCallback) {\n              this.mainButtonCallback();\n            } else {\n              if (WebApp.close) WebApp.close();\n            }\n          });\n        }\n\n        // Адаптируем viewport для Telegram\n        this.adaptViewport();\n\n        this.isInitialized = true;\n        console.log('Telegram WebApp initialized successfully');\n      } catch (error) {\n        console.error('Failed to initialize Telegram WebApp:', error);\n      }\n    }\n  }\n\n  private applyTelegramTheme() {\n    if (!this.isInitialized || !WebApp.themeParams) return;\n\n    const themeParams = WebApp.themeParams;\n    const root = document.documentElement;\n\n    // Применяем цвета из Telegram\n    if (themeParams.bg_color) {\n      root.style.setProperty('--tg-bg-color', themeParams.bg_color);\n      document.body.style.backgroundColor = themeParams.bg_color;\n    }\n    \n    if (themeParams.text_color) {\n      root.style.setProperty('--tg-text-color', themeParams.text_color);\n      document.body.style.color = themeParams.text_color;\n    }\n    \n    if (themeParams.hint_color) {\n      root.style.setProperty('--tg-hint-color', themeParams.hint_color);\n    }\n    \n    if (themeParams.button_color) {\n      root.style.setProperty('--tg-button-color', themeParams.button_color);\n    }\n    \n    if (themeParams.button_text_color) {\n      root.style.setProperty('--tg-button-text-color', themeParams.button_text_color);\n    }\n\n    // Устанавливаем data-theme атрибут для CSS\n    const colorScheme = WebApp.colorScheme || 'light';\n    root.setAttribute('data-theme', colorScheme);\n    \n    if (colorScheme === 'dark') {\n      root.classList.add('dark-theme');\n    } else {\n      root.classList.remove('dark-theme');\n    }\n  }\n\n  private adaptViewport() {\n    if (!this.isInitialized) return;\n\n    // Адаптация для мобильных устройств в Telegram\n    document.body.style.margin = '0';\n    document.body.style.padding = '0';\n    document.body.style.height = '100vh';\n    document.body.style.overflow = 'hidden';\n    document.body.style.position = 'fixed';\n    document.body.style.top = '0';\n    document.body.style.left = '0';\n    document.body.style.right = '0';\n    document.body.style.bottom = '0';\n\n    // Обрабатываем изменение viewport\n    WebApp.onEvent('viewportChanged', () => {\n      const height = WebApp.viewportHeight;\n      document.documentElement.style.setProperty('--tg-viewport-height', `${height}px`);\n    });\n  }\n\n  getUser(): TelegramUser | null {\n    return this.user;\n  }\n\n  isTelegramApp(): boolean {\n    return typeof window !== 'undefined' && window.Telegram?.WebApp !== undefined;\n  }\n\n  // Управление главной кнопкой\n  showMainButton() {\n    if (this.isInitialized && WebApp.MainButton && WebApp.MainButton.show) {\n      WebApp.MainButton.show();\n    }\n  }\n\n  hideMainButton() {\n    if (this.isInitialized && WebApp.MainButton && WebApp.MainButton.hide) {\n      WebApp.MainButton.hide();\n    }\n  }\n\n  setMainButtonParams(params: { text?: string; color?: string }) {\n    if (this.isInitialized && WebApp.MainButton && WebApp.MainButton.setParams) {\n      WebApp.MainButton.setParams(params);\n    }\n  }\n\n  setMainButtonCallback(callback: () => void) {\n    this.mainButtonCallback = callback;\n  }\n\n  clearMainButtonCallback() {\n    this.mainButtonCallback = null;\n  }\n\n  // Управление кнопккой \"Назад\"\n  showBackButton() {\n    if (this.isInitialized && WebApp.BackButton && WebApp.BackButton.show) {\n      WebApp.BackButton.show();\n    }\n  }\n\n  hideBackButton() {\n    if (this.isInitialized && WebApp.BackButton && WebApp.BackButton.hide) {\n      WebApp.BackButton.hide();\n    }\n  }\n\n  setBackButtonCallback(callback: () => void) {\n    this.backButtonCallback = callback;\n  }\n\n  clearBackButtonCallback() {\n    this.backButtonCallback = null;\n  }\n\n  // Всплывающие окна\n  showAlert(message: string) {\n    if (this.isInitialized && this.isTelegramApp() && WebApp.showAlert) {\n      try {\n        WebApp.showAlert(message);\n      } catch (error) {\n        console.warn('WebApp.showAlert not supported, fallback to alert:', error);\n        alert(message);\n      }\n    } else {\n      alert(message);\n    }\n  }\n\n  showConfirm(message: string, callback?: (confirmed: boolean) => void) {\n    if (this.isInitialized && this.isTelegramApp() && WebApp.showConfirm) {\n      try {\n        WebApp.showConfirm(message, callback);\n      } catch (error) {\n        console.warn('WebApp.showConfirm not supported, fallback to confirm:', error);\n        const confirmed = window.confirm(message);\n        if (callback) callback(confirmed);\n      }\n    } else {\n      const confirmed = window.confirm(message);\n      if (callback) callback(confirmed);\n    }\n  }\n\n  // Открытие ссылок\n  openLink(url: string) {\n    if (this.isInitialized && WebApp.openLink) {\n      WebApp.openLink(url);\n    } else {\n      window.open(url, '_blank');\n    }\n  }\n\n  openTelegramLink(url: string) {\n    if (this.isInitialized && WebApp.openTelegramLink) {\n      WebApp.openTelegramLink(url);\n    } else {\n      window.open(url, '_blank');\n    }\n  }\n\n  // Управление приложением\n  close() {\n    if (this.isInitialized && WebApp.close) {\n      WebApp.close();\n    }\n  }\n\n  ready() {\n    if (this.isInitialized && WebApp.ready) {\n      WebApp.ready();\n    }\n  }\n\n  expand() {\n    if (this.isInitialized && WebApp.expand) {\n      WebApp.expand();\n    }\n  }\n\n  // Тема и оформление\n  getThemeParams() {\n    if (this.isInitialized) {\n      return WebApp.themeParams;\n    }\n    return {};\n  }\n\n  getColorScheme() {\n    if (this.isInitialized) {\n      return WebApp.colorScheme;\n    }\n    return 'light';\n  }\n\n  getViewportHeight() {\n    if (this.isInitialized) {\n      return WebApp.viewportHeight;\n    }\n    return window.innerHeight;\n  }\n\n\n\n  // Данные и события\n  sendData(data: string) {\n    if (this.isInitialized) {\n      WebApp.sendData(data);\n    }\n  }\n\n  openInvoice(url: string, callback?: (status: string) => void) {\n    if (this.isInitialized && WebApp.openInvoice) {\n      WebApp.openInvoice(url, callback);\n    }\n  }\n\n\n\n  setHeaderColor(color: `#${string}` | 'bg_color' | 'secondary_bg_color') {\n    if (this.isInitialized && WebApp.setHeaderColor) {\n      WebApp.setHeaderColor(color);\n    }\n  }\n\n  setBackgroundColor(color: `#${string}` | 'bg_color' | 'secondary_bg_color') {\n    if (this.isInitialized && WebApp.setBackgroundColor) {\n      WebApp.setBackgroundColor(color);\n    }\n  }\n\n  // Haptic feedback\n  impactOccurred(style: 'light' | 'medium' | 'heavy' = 'medium') {\n    if (this.isInitialized && this.isTelegramApp() && WebApp.HapticFeedback) {\n      WebApp.HapticFeedback.impactOccurred(style);\n    }\n  }\n\n  notificationOccurred(type: 'error' | 'success' | 'warning') {\n    if (this.isInitialized && this.isTelegramApp() && WebApp.HapticFeedback) {\n      WebApp.HapticFeedback.notificationOccurred(type);\n    }\n  }\n\n  selectionChanged() {\n    if (this.isInitialized && this.isTelegramApp() && WebApp.HapticFeedback) {\n      WebApp.HapticFeedback.selectionChanged();\n    }\n  }\n\n  // Получение initData для отправки на сервер\n  getInitData(): string | null {\n    if (this.isInitialized) {\n      return WebApp.initData;\n    }\n    return null;\n  }\n}\n\nexport const telegramService = new TelegramService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}