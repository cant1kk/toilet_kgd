{"ast":null,"code":"import axios from 'axios';\n// Автоматическое определение базового URL API\nconst getApiBaseUrl = () => {\n  // Если указан в переменных окружения (для продакшена)\n  if (process.env.REACT_APP_API_URL) {\n    return process.env.REACT_APP_API_URL;\n  }\n\n  // Для разработки определяем хост автоматически\n  const hostname = window.location.hostname;\n\n  // Если заходим с localhost, используем localhost\n  if (hostname === 'localhost' || hostname === '127.0.0.1') {\n    return 'http://localhost:5000/api';\n  }\n\n  // Если заходим по IP, используем тот же IP для API\n  return `http://${hostname}:5000/api`;\n};\nconst API_BASE_URL = getApiBaseUrl();\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 10000 // 10 second timeout\n});\n\n// Add token to requests if available\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('adminToken');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Response caching\nconst cache = new Map();\nconst CACHE_DURATION = 5 * 60 * 1000; // 5 minutes\n\napi.interceptors.response.use(response => {\n  var _response$config$meth;\n  if (((_response$config$meth = response.config.method) === null || _response$config$meth === void 0 ? void 0 : _response$config$meth.toLowerCase()) === 'get') {\n    const key = response.config.url || '';\n    cache.set(key, {\n      data: response.data,\n      timestamp: Date.now()\n    });\n  }\n  return response;\n});\n\n// Request interceptor for cache\napi.interceptors.request.use(config => {\n  var _config$method;\n  if (((_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toLowerCase()) === 'get') {\n    const key = config.url || '';\n    const cached = cache.get(key);\n    if (cached && Date.now() - cached.timestamp < CACHE_DURATION) {\n      // Return cached data\n      return Promise.reject({\n        __cached: true,\n        data: cached.data\n      });\n    }\n  }\n  return config;\n});\n\n// Handle cached responses\napi.interceptors.response.use(response => response, error => {\n  if (error.__cached) {\n    return Promise.resolve({\n      data: error.data\n    });\n  }\n  return Promise.reject(error);\n});\nexport const toiletAPI = {\n  // Get all approved toilets\n  getAll: () => api.get('/toilets').then(res => res.data),\n  // Get toilet by ID\n  getById: id => api.get(`/toilets/${id}`).then(res => res.data),\n  // Submit new toilet\n  submit: data => api.post('/toilets', data).then(res => res.data)\n};\nexport const authAPI = {\n  // Register admin (only first time)\n  register: (username, password) => api.post('/auth/register', {\n    username,\n    password\n  }).then(res => res.data),\n  // Login admin\n  login: (username, password) => api.post('/auth/login', {\n    username,\n    password\n  }).then(res => res.data),\n  // Get admin profile\n  getProfile: () => api.get('/admin/profile').then(res => res.data)\n};\nexport const adminAPI = {\n  // Get all toilets (including unapproved)\n  getAllToilets: status => {\n    const params = status ? `?status=${status}` : '';\n    return api.get(`/admin/toilets${params}`).then(res => res.data);\n  },\n  // Approve toilet\n  approveToilet: id => api.put(`/admin/toilets/${id}/approve`).then(res => res.data),\n  // Delete toilet\n  deleteToilet: id => api.delete(`/admin/toilets/${id}`).then(res => res.data),\n  // Update toilet\n  updateToilet: (id, data) => api.put(`/admin/toilets/${id}`, data).then(res => res.data)\n};","map":{"version":3,"names":["axios","getApiBaseUrl","process","env","REACT_APP_API_URL","hostname","window","location","API_BASE_URL","api","create","baseURL","timeout","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","cache","Map","CACHE_DURATION","response","_response$config$meth","method","toLowerCase","key","url","set","data","timestamp","Date","now","_config$method","cached","get","Promise","reject","__cached","error","resolve","toiletAPI","getAll","then","res","getById","id","submit","post","authAPI","register","username","password","login","getProfile","adminAPI","getAllToilets","status","params","approveToilet","put","deleteToilet","delete","updateToilet"],"sources":["D:/map for cur/toilet-finder-kaliningrad/frontend/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\nimport { Toilet, ToiletFormData, Admin } from '../types';\n\n// Автоматическое определение базового URL API\nconst getApiBaseUrl = () => {\n  // Если указан в переменных окружения (для продакшена)\n  if (process.env.REACT_APP_API_URL) {\n    return process.env.REACT_APP_API_URL;\n  }\n  \n  // Для разработки определяем хост автоматически\n  const hostname = window.location.hostname;\n  \n  // Если заходим с localhost, используем localhost\n  if (hostname === 'localhost' || hostname === '127.0.0.1') {\n    return 'http://localhost:5000/api';\n  }\n  \n  // Если заходим по IP, используем тот же IP для API\n  return `http://${hostname}:5000/api`;\n};\n\nconst API_BASE_URL = getApiBaseUrl();\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 10000, // 10 second timeout\n});\n\n// Add token to requests if available\napi.interceptors.request.use((config) => {\n  const token = localStorage.getItem('adminToken');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Response caching\nconst cache = new Map<string, { data: any; timestamp: number }>();\nconst CACHE_DURATION = 5 * 60 * 1000; // 5 minutes\n\napi.interceptors.response.use((response) => {\n  if (response.config.method?.toLowerCase() === 'get') {\n    const key = response.config.url || '';\n    cache.set(key, {\n      data: response.data,\n      timestamp: Date.now()\n    });\n  }\n  return response;\n});\n\n// Request interceptor for cache\napi.interceptors.request.use((config) => {\n  if (config.method?.toLowerCase() === 'get') {\n    const key = config.url || '';\n    const cached = cache.get(key);\n    if (cached && Date.now() - cached.timestamp < CACHE_DURATION) {\n      // Return cached data\n      return Promise.reject({ __cached: true, data: cached.data });\n    }\n  }\n  return config;\n});\n\n// Handle cached responses\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.__cached) {\n      return Promise.resolve({ data: error.data });\n    }\n    return Promise.reject(error);\n  }\n);\n\nexport const toiletAPI = {\n  // Get all approved toilets\n  getAll: (): Promise<Toilet[]> => \n    api.get('/toilets').then(res => res.data),\n\n  // Get toilet by ID\n  getById: (id: number): Promise<Toilet> => \n    api.get(`/toilets/${id}`).then(res => res.data),\n\n  // Submit new toilet\n  submit: (data: ToiletFormData): Promise<{ message: string; id: number }> => \n    api.post('/toilets', data).then(res => res.data),\n};\n\nexport const authAPI = {\n  // Register admin (only first time)\n  register: (username: string, password: string): Promise<{ message: string; token: string; admin: Admin }> => \n    api.post('/auth/register', { username, password }).then(res => res.data),\n\n  // Login admin\n  login: (username: string, password: string): Promise<{ message: string; token: string; admin: Admin }> => \n    api.post('/auth/login', { username, password }).then(res => res.data),\n\n  // Get admin profile\n  getProfile: (): Promise<{ user: Admin }> => \n    api.get('/admin/profile').then(res => res.data),\n};\n\nexport const adminAPI = {\n  // Get all toilets (including unapproved)\n  getAllToilets: (status?: 'pending' | 'approved'): Promise<Toilet[]> => {\n    const params = status ? `?status=${status}` : '';\n    return api.get(`/admin/toilets${params}`).then(res => res.data);\n  },\n\n  // Approve toilet\n  approveToilet: (id: number): Promise<{ message: string }> => \n    api.put(`/admin/toilets/${id}/approve`).then(res => res.data),\n\n  // Delete toilet\n  deleteToilet: (id: number): Promise<{ message: string }> => \n    api.delete(`/admin/toilets/${id}`).then(res => res.data),\n\n  // Update toilet\n  updateToilet: (id: number, data: ToiletFormData): Promise<{ message: string }> => \n    api.put(`/admin/toilets/${id}`, data).then(res => res.data),\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}